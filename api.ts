// tslint:disable
/**
 * UR-API üç™
 * UR Metadata Aggregation API
 *
 * The version of the OpenAPI document: 0.1
 * Contact: email@ur.se
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AccessibleEvent
 */
export interface AccessibleEvent {
    /**
     * Time when product was updated. ISO8601 formatted date in UTC
     * @type {Date}
     * @memberof AccessibleEvent
     */
    startTime?: Date;
    /**
     * Time when product was updated. ISO8601 formatted date in UTC
     * @type {Date}
     * @memberof AccessibleEvent
     */
    endTime?: Date;
}
/**
 * Streamable on each platform if the platform key is present. Start and end time may look different in other UR systems as in this API the \'distribution events\' may be merged. They are merged if a \'distribution event\' starts less than 10 minutes after another one on the same platform ends. 
 * @export
 * @interface AccessiblePlatforms
 */
export interface AccessiblePlatforms {
    /**
     * 
     * @type {AccessibleEvent}
     * @memberof AccessiblePlatforms
     */
    urskola?: AccessibleEvent;
    /**
     * 
     * @type {AccessibleEvent}
     * @memberof AccessiblePlatforms
     */
    urplay?: AccessibleEvent;
    /**
     * 
     * @type {AccessibleEvent}
     * @memberof AccessiblePlatforms
     */
    uraccess?: AccessibleEvent;
}
/**
 * 
 * @export
 * @interface AgeRange
 */
export interface AgeRange {
    /**
     * 
     * @type {number}
     * @memberof AgeRange
     */
    from: number;
    /**
     * 
     * @type {number}
     * @memberof AgeRange
     */
    to: number;
}
/**
 * 
 * @export
 * @interface Broadcast
 */
export interface Broadcast {
    /**
     * Time when product was updated. ISO8601 formatted date in UTC
     * @type {Date}
     * @memberof Broadcast
     */
    startTime?: Date;
    /**
     * Time when product was updated. ISO8601 formatted date in UTC
     * @type {Date}
     * @memberof Broadcast
     */
    endTime?: Date;
    /**
     * The platform where the broadcast took place,   for example svt1, svt2, sr 
     * @type {string}
     * @memberof Broadcast
     */
    platform?: string;
}
/**
 * 
 * @export
 * @interface Categories
 */
export interface Categories {
    /**
     * 
     * @type {string}
     * @memberof Categories
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof Categories
     */
    count?: number;
}
/**
 * Product format
 * @export
 * @enum {string}
 */
export enum Format {
    Audio = 'audio',
    Video = 'video'
}

/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {object}
     * @memberof InlineResponse200
     */
    languages?: object;
}
/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * 
     * @type {Array<Keywords>}
     * @memberof InlineResponse2001
     */
    keywords?: Array<Keywords>;
}
/**
 * 
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     * 
     * @type {Array<ProgramSummary>}
     * @memberof InlineResponse2002
     */
    programs?: Array<ProgramSummary>;
    /**
     * Number of related programs found
     * @type {number}
     * @memberof InlineResponse2002
     */
    totalResults?: number;
    /**
     * Number of related programs in response
     * @type {number}
     * @memberof InlineResponse2002
     */
    rows?: number;
}
/**
 * 
 * @export
 * @interface InlineResponse2003
 */
export interface InlineResponse2003 {
    /**
     * Product ids that where imported
     * @type {Array<number>}
     * @memberof InlineResponse2003
     */
    importedIds?: Array<number>;
}
/**
 * A keyword from Solr
 * @export
 * @interface Keywords
 */
export interface Keywords {
    /**
     * 
     * @type {number}
     * @memberof Keywords
     */
    keyword?: number;
}
/**
 * ISO 639-3 language code with extensions
 * @export
 * @enum {string}
 */
export enum LanguageCode3 {
    Aii = 'aii',
    Alb = 'alb',
    Amh = 'amh',
    Ara = 'ara',
    Bos = 'bos',
    Bul = 'bul',
    Cat = 'cat',
    Che = 'che',
    Chi = 'chi',
    Ckb = 'ckb',
    Cld = 'cld',
    Cze = 'cze',
    Dan = 'dan',
    Dut = 'dut',
    Eng = 'eng',
    Est = 'est',
    Fil = 'fil',
    Fin = 'fin',
    Fiu = 'fiu',
    Fre = 'fre',
    Ger = 'ger',
    Gre = 'gre',
    Heb = 'heb',
    Hun = 'hun',
    Ice = 'ice',
    Ita = 'ita',
    Jpn = 'jpn',
    Kaz = 'kaz',
    Kur = 'kur',
    Lav = 'lav',
    Lit = 'lit',
    Mac = 'mac',
    Mis = 'mis',
    Mlt = 'mlt',
    Nor = 'nor',
    Per = 'per',
    Pol = 'pol',
    Por = 'por',
    Prs = 'prs',
    Pus = 'pus',
    Rmu = 'rmu',
    Rom = 'rom',
    RomArli = 'rom-arli',
    RomKaal = 'rom-kaal',
    RomKeld = 'rom-keld',
    RomLova = 'rom-lova',
    Rum = 'rum',
    Run = 'run',
    Rus = 'rus',
    Scr = 'scr',
    SgnGBR = 'sgn-GBR',
    SgnSWE = 'sgn-SWE',
    Sju = 'sju',
    Slo = 'slo',
    Slv = 'slv',
    Sma = 'sma',
    Sme = 'sme',
    Smj = 'smj',
    Som = 'som',
    Spa = 'spa',
    Srp = 'srp',
    Swa = 'swa',
    Swe = 'swe',
    Tha = 'tha',
    Tir = 'tir',
    Tur = 'tur',
    Yid = 'yid'
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum LanguageLevel {
    A1 = 'A1',
    A2 = 'A2',
    B1 = 'B1',
    B2 = 'B2',
    C1 = 'C1'
}

/**
 * 
 * @export
 * @interface ModelFile
 */
export interface ModelFile {
    /**
     * 
     * @type {string}
     * @memberof ModelFile
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelFile
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelFile
     */
    type?: ModelFileTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof ModelFile
     */
    fileType?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelFile
     */
    location?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ModelFileTypeEnum {
    Teacherguide = 'teacherguide',
    Script = 'script',
    Worksheet = 'worksheet',
    Text = 'text',
    Website = 'website'
}

/**
 * 
 * @export
 * @interface Participant
 */
export interface Participant {
    /**
     * 
     * @type {string}
     * @memberof Participant
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof Participant
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof Participant
     */
    role?: string;
    /**
     * 
     * @type {string}
     * @memberof Participant
     */
    profession?: string;
}
/**
 * 
 * @export
 * @interface PodInfo
 */
export interface PodInfo {
    /**
     * 
     * @type {boolean}
     * @memberof PodInfo
     */
    isDownloadable?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PodInfo
     */
    file?: string;
    /**
     * 
     * @type {string}
     * @memberof PodInfo
     */
    filename?: string;
    /**
     * 
     * @type {string}
     * @memberof PodInfo
     */
    format?: string;
}
/**
 * An array of URLs to the product image mapped by resolution
 * @export
 * @interface ProductImage
 */
export interface ProductImage {
    /**
     * 
     * @type {string}
     * @memberof ProductImage
     */
    _1280x720?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductImage
     */
    _960x540?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductImage
     */
    _640x360?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductImage
     */
    _480x270?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductImage
     */
    _320x180?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductImage
     */
    _240x135?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductImage
     */
    _160x90?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductImage
     */
    _128x72?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductImage
     */
    _64x36?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductImage
     */
    _360x360?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductImage
     */
    _75x75?: string;
}
/**
 * An object that contains an array of product image objects
 * @export
 * @interface ProductImages
 */
export interface ProductImages {
    /**
     * 
     * @type {Array<ProductImage>}
     * @memberof ProductImages
     */
    images?: Array<ProductImage>;
}
/**
 * 
 * @export
 * @interface ProductSearchResponse
 */
export interface ProductSearchResponse {
    /**
     * 
     * @type {Array<ProgramSummary | Series | SuperSeries>}
     * @memberof ProductSearchResponse
     */
    results?: Array<ProgramSummary | Series | SuperSeries>;
    /**
     * 
     * @type {number}
     * @memberof ProductSearchResponse
     */
    rows?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductSearchResponse
     */
    totalResults?: number;
}
/**
 * Type of product
 * @export
 * @enum {string}
 */
export enum ProductType {
    Program = 'program',
    Series = 'series',
    SuperSeries = 'super_series'
}

/**
 * 
 * @export
 * @interface Program
 */
export interface Program {
    /**
     * 
     * @type {number}
     * @memberof Program
     */
    id?: number;
    /**
     * Program title, note that this is the old remainder_of_title
     * @type {string}
     * @memberof Program
     */
    title?: string;
    /**
     * Program main_title, often the same as series title
     * @type {string}
     * @memberof Program
     */
    mainTitle?: string;
    /**
     * 
     * @type {string}
     * @memberof Program
     */
    description?: string;
    /**
     * Episode number in series, if applicable
     * @type {number}
     * @memberof Program
     */
    episodeNumber?: number;
    /**
     * Number of episodes in series, may be blank
     * @type {number}
     * @memberof Program
     */
    numberOfEpisodes?: number;
    /**
     * Duration in seconds
     * @type {number}
     * @memberof Program
     */
    duration?: number;
    /**
     * 
     * @type {Format}
     * @memberof Program
     */
    format?: Format;
    /**
     * Spoken languages in program
     * @type {Array<string>}
     * @memberof Program
     */
    languages?: Array<string>;
    /**
     * Languages available for closed captions, with complete subtitles
     * @type {Array<string>}
     * @memberof Program
     */
    subtitleLanguages?: Array<string>;
    /**
     * 
     * @type {Array<LanguageLevel>}
     * @memberof Program
     */
    languageLevel?: Array<LanguageLevel>;
    /**
     * 
     * @type {Array<TypicalAgeRange>}
     * @memberof Program
     */
    typicalAgeRange?: Array<TypicalAgeRange>;
    /**
     * 
     * @type {Array<AgeRange>}
     * @memberof Program
     */
    ageRanges?: Array<AgeRange>;
    /**
     * True if this program has teacher resources attached
     * @type {boolean}
     * @memberof Program
     */
    hasTeacherResource?: boolean;
    /**
     * A short, usually less than 70 characters, description of the program
     * @type {string}
     * @memberof Program
     */
    usp?: string;
    /**
     * 
     * @type {AccessiblePlatforms}
     * @memberof Program
     */
    accessiblePlatforms?: AccessiblePlatforms;
    /**
     * 
     * @type {ProductImage}
     * @memberof Program
     */
    image?: ProductImage;
    /**
     * Time when product was updated. ISO8601 formatted date in UTC
     * @type {Date}
     * @memberof Program
     */
    modified?: Date;
    /**
     * 
     * @type {Array<string>}
     * @memberof Program
     */
    categories?: Array<string>;
    /**
     * 
     * @type {ProductType}
     * @memberof Program
     */
    productType?: ProductType;
    /**
     * International title
     * @type {string}
     * @memberof Program
     */
    internationalTitle?: string;
    /**
     * 
     * @type {string}
     * @memberof Program
     */
    mainGenre?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof Program
     */
    emotionalTags?: Array<string>;
    /**
     * Time when product was updated. ISO8601 formatted date in UTC
     * @type {Date}
     * @memberof Program
     */
    publishedAt?: Date;
    /**
     * 
     * @type {Array<Participant>}
     * @memberof Program
     */
    participants?: Array<Participant>;
    /**
     * 
     * @type {number}
     * @memberof Program
     */
    productionYear?: number;
    /**
     * SEO optimized title to use in html header
     * @type {string}
     * @memberof Program
     */
    seoTitle?: string;
    /**
     * SEO optimized description to use in html header
     * @type {string}
     * @memberof Program
     */
    seoDescription?: string;
    /**
     * Flag whether the program is streamable
     * @type {boolean}
     * @memberof Program
     */
    streamable?: boolean;
    /**
     * Flag whether the program is available only in Sweden
     * @type {boolean}
     * @memberof Program
     */
    onlyInSweden?: boolean;
    /**
     * Subjects
     * @type {Array<Array<string>>}
     * @memberof Program
     */
    subjectTree?: Array<Array<string>>;
    /**
     * 
     * @type {Array<Keywords>}
     * @memberof Program
     */
    keywords?: Array<Keywords>;
    /**
     * 
     * @type {Array<any>}
     * @memberof Program
     */
    files?: Array<any>;
    /**
     * 
     * @type {StreamingInfo}
     * @memberof Program
     */
    streamingInfo?: StreamingInfo;
    /**
     * 
     * @type {Array<Broadcast>}
     * @memberof Program
     */
    broadcasts?: Array<Broadcast>;
    /**
     * 
     * @type {PodInfo}
     * @memberof Program
     */
    podInfo?: PodInfo;
}
/**
 * 
 * @export
 * @interface ProgramAllOf
 */
export interface ProgramAllOf {
    /**
     * Subjects
     * @type {Array<Array<string>>}
     * @memberof ProgramAllOf
     */
    subjectTree?: Array<Array<string>>;
    /**
     * 
     * @type {Array<Keywords>}
     * @memberof ProgramAllOf
     */
    keywords?: Array<Keywords>;
    /**
     * 
     * @type {Array<any>}
     * @memberof ProgramAllOf
     */
    files?: Array<any>;
    /**
     * 
     * @type {StreamingInfo}
     * @memberof ProgramAllOf
     */
    streamingInfo?: StreamingInfo;
    /**
     * 
     * @type {Array<Broadcast>}
     * @memberof ProgramAllOf
     */
    broadcasts?: Array<Broadcast>;
    /**
     * 
     * @type {PodInfo}
     * @memberof ProgramAllOf
     */
    podInfo?: PodInfo;
}
/**
 * Program
 * @export
 * @interface ProgramSummary
 */
export interface ProgramSummary {
    /**
     * 
     * @type {number}
     * @memberof ProgramSummary
     */
    id?: number;
    /**
     * Program title, note that this is the old remainder_of_title
     * @type {string}
     * @memberof ProgramSummary
     */
    title?: string;
    /**
     * Program main_title, often the same as series title
     * @type {string}
     * @memberof ProgramSummary
     */
    mainTitle?: string;
    /**
     * 
     * @type {string}
     * @memberof ProgramSummary
     */
    description?: string;
    /**
     * Episode number in series, if applicable
     * @type {number}
     * @memberof ProgramSummary
     */
    episodeNumber?: number;
    /**
     * Number of episodes in series, may be blank
     * @type {number}
     * @memberof ProgramSummary
     */
    numberOfEpisodes?: number;
    /**
     * Duration in seconds
     * @type {number}
     * @memberof ProgramSummary
     */
    duration?: number;
    /**
     * 
     * @type {Format}
     * @memberof ProgramSummary
     */
    format?: Format;
    /**
     * Spoken languages in program
     * @type {Array<string>}
     * @memberof ProgramSummary
     */
    languages?: Array<string>;
    /**
     * Languages available for closed captions, with complete subtitles
     * @type {Array<string>}
     * @memberof ProgramSummary
     */
    subtitleLanguages?: Array<string>;
    /**
     * 
     * @type {Array<LanguageLevel>}
     * @memberof ProgramSummary
     */
    languageLevel?: Array<LanguageLevel>;
    /**
     * 
     * @type {Array<TypicalAgeRange>}
     * @memberof ProgramSummary
     */
    typicalAgeRange?: Array<TypicalAgeRange>;
    /**
     * 
     * @type {Array<AgeRange>}
     * @memberof ProgramSummary
     */
    ageRanges?: Array<AgeRange>;
    /**
     * True if this program has teacher resources attached
     * @type {boolean}
     * @memberof ProgramSummary
     */
    hasTeacherResource?: boolean;
    /**
     * A short, usually less than 70 characters, description of the program
     * @type {string}
     * @memberof ProgramSummary
     */
    usp?: string;
    /**
     * 
     * @type {AccessiblePlatforms}
     * @memberof ProgramSummary
     */
    accessiblePlatforms?: AccessiblePlatforms;
    /**
     * 
     * @type {ProductImage}
     * @memberof ProgramSummary
     */
    image?: ProductImage;
    /**
     * Time when product was updated. ISO8601 formatted date in UTC
     * @type {Date}
     * @memberof ProgramSummary
     */
    modified?: Date;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProgramSummary
     */
    categories?: Array<string>;
    /**
     * 
     * @type {ProductType}
     * @memberof ProgramSummary
     */
    productType?: ProductType;
    /**
     * International title
     * @type {string}
     * @memberof ProgramSummary
     */
    internationalTitle?: string;
    /**
     * 
     * @type {string}
     * @memberof ProgramSummary
     */
    mainGenre?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProgramSummary
     */
    emotionalTags?: Array<string>;
    /**
     * Time when product was updated. ISO8601 formatted date in UTC
     * @type {Date}
     * @memberof ProgramSummary
     */
    publishedAt?: Date;
    /**
     * 
     * @type {Array<Participant>}
     * @memberof ProgramSummary
     */
    participants?: Array<Participant>;
    /**
     * 
     * @type {number}
     * @memberof ProgramSummary
     */
    productionYear?: number;
    /**
     * SEO optimized title to use in html header
     * @type {string}
     * @memberof ProgramSummary
     */
    seoTitle?: string;
    /**
     * SEO optimized description to use in html header
     * @type {string}
     * @memberof ProgramSummary
     */
    seoDescription?: string;
    /**
     * Flag whether the program is streamable
     * @type {boolean}
     * @memberof ProgramSummary
     */
    streamable?: boolean;
    /**
     * Flag whether the program is available only in Sweden
     * @type {boolean}
     * @memberof ProgramSummary
     */
    onlyInSweden?: boolean;
}
/**
 * 
 * @export
 * @interface Series
 */
export interface Series {
    /**
     * 
     * @type {number}
     * @memberof Series
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Series
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof Series
     */
    description?: string;
    /**
     * A short, usually less than 70 characters, description of the series
     * @type {string}
     * @memberof Series
     */
    usp?: string | null;
    /**
     * Super Series id, or blank if none
     * @type {number}
     * @memberof Series
     */
    superSeriesId?: number | null;
    /**
     * Series title, i.e. \'S√§song 2\'
     * @type {string}
     * @memberof Series
     */
    label?: string | null;
    /**
     * Episode count in series, reads from metadata field `number_of_episodes` 
     * @type {number}
     * @memberof Series
     */
    programCount?: number | null;
    /**
     * 
     * @type {Format}
     * @memberof Series
     */
    format?: Format;
    /**
     * 
     * @type {ProductImage}
     * @memberof Series
     */
    image?: ProductImage;
    /**
     * The collected categories from all programs in the series
     * @type {Array<string>}
     * @memberof Series
     */
    categories?: Array<string>;
    /**
     * Time when product was updated. ISO8601 formatted date in UTC
     * @type {Date}
     * @memberof Series
     */
    modified?: Date;
    /**
     * 
     * @type {ProductType}
     * @memberof Series
     */
    productType?: ProductType;
    /**
     * 
     * @type {AccessiblePlatforms}
     * @memberof Series
     */
    accessiblePlatforms?: AccessiblePlatforms;
    /**
     * 
     * @type {Array<TypicalAgeRange>}
     * @memberof Series
     */
    typicalAgeRange?: Array<TypicalAgeRange>;
    /**
     * 
     * @type {string}
     * @memberof Series
     */
    mainGenre?: string | null;
    /**
     * 
     * @type {Array<AgeRange>}
     * @memberof Series
     */
    ageRanges?: Array<AgeRange>;
    /**
     * 
     * @type {Array<number>}
     * @memberof Series
     */
    streamableProgramIds?: Array<number>;
    /**
     * SEO optimized title to use in html header
     * @type {string}
     * @memberof Series
     */
    seoTitle?: string;
    /**
     * SEO optimized description to use in html header
     * @type {string}
     * @memberof Series
     */
    seoDescription?: string;
}
/**
 * Stream information for a program
 * @export
 * @interface Stream
 */
export interface Stream {
    /**
     * 
     * @type {string}
     * @memberof Stream
     */
    location?: string;
    /**
     * 
     * @type {string}
     * @memberof Stream
     */
    scope?: string;
    /**
     * 
     * @type {string}
     * @memberof Stream
     */
    language?: string;
}
/**
 * Streaming information required to initiate a stream. Multiple versions with multiple qualities can be specified in the same request body. The following is just one example. 
 * @export
 * @interface StreamingInfo
 */
export interface StreamingInfo {
    /**
     * 
     * @type {StreamingInfoSweComplete}
     * @memberof StreamingInfo
     */
    sweComplete?: StreamingInfoSweComplete;
}
/**
 * 
 * @export
 * @interface StreamingInfoSweComplete
 */
export interface StreamingInfoSweComplete {
    /**
     * 
     * @type {string}
     * @memberof StreamingInfoSweComplete
     */
    label?: string;
    /**
     * 
     * @type {boolean}
     * @memberof StreamingInfoSweComplete
     */
    _default?: boolean;
    /**
     * 
     * @type {Stream}
     * @memberof StreamingInfoSweComplete
     */
    sd?: Stream;
    /**
     * 
     * @type {Stream}
     * @memberof StreamingInfoSweComplete
     */
    hd?: Stream;
    /**
     * 
     * @type {Stream}
     * @memberof StreamingInfoSweComplete
     */
    tt?: Stream;
}
/**
 * 
 * @export
 * @interface SuperSeries
 */
export interface SuperSeries {
    /**
     * 
     * @type {number}
     * @memberof SuperSeries
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof SuperSeries
     */
    title?: string;
    /**
     * 
     * @type {ProductImage}
     * @memberof SuperSeries
     */
    image?: ProductImage;
    /**
     * Time when product was updated. ISO8601 formatted date in UTC
     * @type {Date}
     * @memberof SuperSeries
     */
    modified?: Date;
    /**
     * 
     * @type {Format}
     * @memberof SuperSeries
     */
    format?: Format;
    /**
     * 
     * @type {ProductType}
     * @memberof SuperSeries
     */
    productType?: ProductType;
    /**
     * SEO optimized title to use in html header
     * @type {string}
     * @memberof SuperSeries
     */
    seoTitle?: string;
    /**
     * SEO optimized description to use in html header
     * @type {string}
     * @memberof SuperSeries
     */
    seoDescription?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum TypicalAgeRange {
    Preschool = 'preschool',
    Primary03 = 'primary0-3',
    Primary46 = 'primary4-6',
    Primary79 = 'primary7-9',
    Secondary = 'secondary',
    University = 'university',
    Folkhighschool = 'folkhighschool',
    Komvuxgrundvux = 'komvuxgrundvux',
    Teachereducation = 'teachereducation',
    Schoolvux = 'schoolvux',
    Specialschool = 'specialschool',
    Popularadulteducation = 'popularadulteducation',
    Specialschoolprimary = 'specialschoolprimary',
    Specialschoolsecondary = 'specialschoolsecondary',
    Specialschooladults = 'specialschooladults',
    Adults = 'adults',
    Children = 'children'
}


/**
 * CategoriesApi - axios parameter creator
 * @export
 */
export const CategoriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This will implicitly use the urplay platform, since the categories only exist for products on play
         * @summary All categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategories(options: any = {}): RequestArgs {
            const localVarPath = `/categories`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoriesApi - functional programming interface
 * @export
 */
export const CategoriesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * This will implicitly use the urplay platform, since the categories only exist for products on play
         * @summary All categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategories(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Categories>> {
            const localVarAxiosArgs = CategoriesApiAxiosParamCreator(configuration).getCategories(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CategoriesApi - factory interface
 * @export
 */
export const CategoriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * This will implicitly use the urplay platform, since the categories only exist for products on play
         * @summary All categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategories(options?: any) {
            return CategoriesApiFp(configuration).getCategories(options)(axios, basePath);
        },
    };
};

/**
 * CategoriesApi - object-oriented interface
 * @export
 * @class CategoriesApi
 * @extends {BaseAPI}
 */
export class CategoriesApi extends BaseAPI {
    /**
     * This will implicitly use the urplay platform, since the categories only exist for products on play
     * @summary All categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public getCategories(options?: any) {
        return CategoriesApiFp(this.configuration).getCategories(options)(this.axios, this.basePath);
    }

}


/**
 * ImagesApi - axios parameter creator
 * @export
 */
export const ImagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary All images with a certain index for a certain product
         * @param {number} productId Product ID
         * @param {number} index Index of image
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductImageIndex(productId: number, index: number, options: any = {}): RequestArgs {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling getProductImageIndex.');
            }
            // verify required parameter 'index' is not null or undefined
            if (index === null || index === undefined) {
                throw new RequiredError('index','Required parameter index was null or undefined when calling getProductImageIndex.');
            }
            const localVarPath = `/products/{product_id}/images/{index}`
                .replace(`{${"product_id"}}`, encodeURIComponent(String(productId)))
                .replace(`{${"index"}}`, encodeURIComponent(String(index)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary All images for a certain product
         * @param {number} productId Product ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductImages(productId: number, options: any = {}): RequestArgs {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling getProductImages.');
            }
            const localVarPath = `/products/{product_id}/images`
                .replace(`{${"product_id"}}`, encodeURIComponent(String(productId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ImagesApi - functional programming interface
 * @export
 */
export const ImagesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary All images with a certain index for a certain product
         * @param {number} productId Product ID
         * @param {number} index Index of image
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductImageIndex(productId: number, index: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductImage> {
            const localVarAxiosArgs = ImagesApiAxiosParamCreator(configuration).getProductImageIndex(productId, index, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary All images for a certain product
         * @param {number} productId Product ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductImages(productId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductImages> {
            const localVarAxiosArgs = ImagesApiAxiosParamCreator(configuration).getProductImages(productId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ImagesApi - factory interface
 * @export
 */
export const ImagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary All images with a certain index for a certain product
         * @param {number} productId Product ID
         * @param {number} index Index of image
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductImageIndex(productId: number, index: number, options?: any) {
            return ImagesApiFp(configuration).getProductImageIndex(productId, index, options)(axios, basePath);
        },
        /**
         * 
         * @summary All images for a certain product
         * @param {number} productId Product ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProductImages(productId: number, options?: any) {
            return ImagesApiFp(configuration).getProductImages(productId, options)(axios, basePath);
        },
    };
};

/**
 * ImagesApi - object-oriented interface
 * @export
 * @class ImagesApi
 * @extends {BaseAPI}
 */
export class ImagesApi extends BaseAPI {
    /**
     * 
     * @summary All images with a certain index for a certain product
     * @param {number} productId Product ID
     * @param {number} index Index of image
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApi
     */
    public getProductImageIndex(productId: number, index: number, options?: any) {
        return ImagesApiFp(this.configuration).getProductImageIndex(productId, index, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary All images for a certain product
     * @param {number} productId Product ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApi
     */
    public getProductImages(productId: number, options?: any) {
        return ImagesApiFp(this.configuration).getProductImages(productId, options)(this.axios, this.basePath);
    }

}


/**
 * ImportApi - axios parameter creator
 * @export
 */
export const ImportApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Imports product and all child products
         * @param {number} id import ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importProductById(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling importProductById.');
            }
            const localVarPath = `/import/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ImportApi - functional programming interface
 * @export
 */
export const ImportApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Imports product and all child products
         * @param {number} id import ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importProductById(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2003> {
            const localVarAxiosArgs = ImportApiAxiosParamCreator(configuration).importProductById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ImportApi - factory interface
 * @export
 */
export const ImportApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Imports product and all child products
         * @param {number} id import ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importProductById(id: number, options?: any) {
            return ImportApiFp(configuration).importProductById(id, options)(axios, basePath);
        },
    };
};

/**
 * ImportApi - object-oriented interface
 * @export
 * @class ImportApi
 * @extends {BaseAPI}
 */
export class ImportApi extends BaseAPI {
    /**
     * 
     * @summary Imports product and all child products
     * @param {number} id import ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImportApi
     */
    public importProductById(id: number, options?: any) {
        return ImportApiFp(this.configuration).importProductById(id, options)(this.axios, this.basePath);
    }

}


/**
 * KeywordsApi - axios parameter creator
 * @export
 */
export const KeywordsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Terms from the search_ao Solr field
         * @param {string} [suggest] Filter against a term suggested by Solr.
         * @param {number} [rows] Number of keywords in response ( default is 50 )
         * @param {'urskola' | 'urplay' | 'uraccess'} [platform] Filter by availability on urskola, urplay, uraccess
         * @param {Array<'preschool' | 'primary0-3' | 'primary4-6' | 'primary7-9' | 'secondary' | 'university' | 'folkhighschool' | 'komvuxgrundvux' | 'teachereducation' | 'schoolvux' | 'specialschool' | 'popularadulteducation' | 'specialschoolprimary' | 'specialschoolsecondary' | 'specialschooladults' | 'adults' | 'children'>} [typicalAgeRange] &lt;b&gt;NOTE:&lt;/b&gt;&lt;br/&gt; \&#39;children\&#39; &#x3D; (preschool OR primary0-3 OR primary4-6) &lt;br/&gt; \&#39;adults\&#39; &#x3D; (primary7-9 OR secondary OR university OR folkhighschool OR komvuxgrundvux OR teachereducation OR schoolvux OR specialschool OR popularadulteducation OR specialschoolprimary OR specialschoolsecondary OR specialschooladults)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKeywords(suggest?: string, rows?: number, platform?: 'urskola' | 'urplay' | 'uraccess', typicalAgeRange?: Array<'preschool' | 'primary0-3' | 'primary4-6' | 'primary7-9' | 'secondary' | 'university' | 'folkhighschool' | 'komvuxgrundvux' | 'teachereducation' | 'schoolvux' | 'specialschool' | 'popularadulteducation' | 'specialschoolprimary' | 'specialschoolsecondary' | 'specialschooladults' | 'adults' | 'children'>, options: any = {}): RequestArgs {
            const localVarPath = `/keywords`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (suggest !== undefined) {
                localVarQueryParameter['suggest'] = suggest;
            }

            if (rows !== undefined) {
                localVarQueryParameter['rows'] = rows;
            }

            if (platform !== undefined) {
                localVarQueryParameter['platform'] = platform;
            }

            if (typicalAgeRange) {
                localVarQueryParameter['typical_age_range[]'] = typicalAgeRange;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * KeywordsApi - functional programming interface
 * @export
 */
export const KeywordsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Terms from the search_ao Solr field
         * @param {string} [suggest] Filter against a term suggested by Solr.
         * @param {number} [rows] Number of keywords in response ( default is 50 )
         * @param {'urskola' | 'urplay' | 'uraccess'} [platform] Filter by availability on urskola, urplay, uraccess
         * @param {Array<'preschool' | 'primary0-3' | 'primary4-6' | 'primary7-9' | 'secondary' | 'university' | 'folkhighschool' | 'komvuxgrundvux' | 'teachereducation' | 'schoolvux' | 'specialschool' | 'popularadulteducation' | 'specialschoolprimary' | 'specialschoolsecondary' | 'specialschooladults' | 'adults' | 'children'>} [typicalAgeRange] &lt;b&gt;NOTE:&lt;/b&gt;&lt;br/&gt; \&#39;children\&#39; &#x3D; (preschool OR primary0-3 OR primary4-6) &lt;br/&gt; \&#39;adults\&#39; &#x3D; (primary7-9 OR secondary OR university OR folkhighschool OR komvuxgrundvux OR teachereducation OR schoolvux OR specialschool OR popularadulteducation OR specialschoolprimary OR specialschoolsecondary OR specialschooladults)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKeywords(suggest?: string, rows?: number, platform?: 'urskola' | 'urplay' | 'uraccess', typicalAgeRange?: Array<'preschool' | 'primary0-3' | 'primary4-6' | 'primary7-9' | 'secondary' | 'university' | 'folkhighschool' | 'komvuxgrundvux' | 'teachereducation' | 'schoolvux' | 'specialschool' | 'popularadulteducation' | 'specialschoolprimary' | 'specialschoolsecondary' | 'specialschooladults' | 'adults' | 'children'>, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001> {
            const localVarAxiosArgs = KeywordsApiAxiosParamCreator(configuration).getKeywords(suggest, rows, platform, typicalAgeRange, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * KeywordsApi - factory interface
 * @export
 */
export const KeywordsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Terms from the search_ao Solr field
         * @param {string} [suggest] Filter against a term suggested by Solr.
         * @param {number} [rows] Number of keywords in response ( default is 50 )
         * @param {'urskola' | 'urplay' | 'uraccess'} [platform] Filter by availability on urskola, urplay, uraccess
         * @param {Array<'preschool' | 'primary0-3' | 'primary4-6' | 'primary7-9' | 'secondary' | 'university' | 'folkhighschool' | 'komvuxgrundvux' | 'teachereducation' | 'schoolvux' | 'specialschool' | 'popularadulteducation' | 'specialschoolprimary' | 'specialschoolsecondary' | 'specialschooladults' | 'adults' | 'children'>} [typicalAgeRange] &lt;b&gt;NOTE:&lt;/b&gt;&lt;br/&gt; \&#39;children\&#39; &#x3D; (preschool OR primary0-3 OR primary4-6) &lt;br/&gt; \&#39;adults\&#39; &#x3D; (primary7-9 OR secondary OR university OR folkhighschool OR komvuxgrundvux OR teachereducation OR schoolvux OR specialschool OR popularadulteducation OR specialschoolprimary OR specialschoolsecondary OR specialschooladults)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKeywords(suggest?: string, rows?: number, platform?: 'urskola' | 'urplay' | 'uraccess', typicalAgeRange?: Array<'preschool' | 'primary0-3' | 'primary4-6' | 'primary7-9' | 'secondary' | 'university' | 'folkhighschool' | 'komvuxgrundvux' | 'teachereducation' | 'schoolvux' | 'specialschool' | 'popularadulteducation' | 'specialschoolprimary' | 'specialschoolsecondary' | 'specialschooladults' | 'adults' | 'children'>, options?: any) {
            return KeywordsApiFp(configuration).getKeywords(suggest, rows, platform, typicalAgeRange, options)(axios, basePath);
        },
    };
};

/**
 * KeywordsApi - object-oriented interface
 * @export
 * @class KeywordsApi
 * @extends {BaseAPI}
 */
export class KeywordsApi extends BaseAPI {
    /**
     * 
     * @summary Terms from the search_ao Solr field
     * @param {string} [suggest] Filter against a term suggested by Solr.
     * @param {number} [rows] Number of keywords in response ( default is 50 )
     * @param {'urskola' | 'urplay' | 'uraccess'} [platform] Filter by availability on urskola, urplay, uraccess
     * @param {Array<'preschool' | 'primary0-3' | 'primary4-6' | 'primary7-9' | 'secondary' | 'university' | 'folkhighschool' | 'komvuxgrundvux' | 'teachereducation' | 'schoolvux' | 'specialschool' | 'popularadulteducation' | 'specialschoolprimary' | 'specialschoolsecondary' | 'specialschooladults' | 'adults' | 'children'>} [typicalAgeRange] &lt;b&gt;NOTE:&lt;/b&gt;&lt;br/&gt; \&#39;children\&#39; &#x3D; (preschool OR primary0-3 OR primary4-6) &lt;br/&gt; \&#39;adults\&#39; &#x3D; (primary7-9 OR secondary OR university OR folkhighschool OR komvuxgrundvux OR teachereducation OR schoolvux OR specialschool OR popularadulteducation OR specialschoolprimary OR specialschoolsecondary OR specialschooladults)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeywordsApi
     */
    public getKeywords(suggest?: string, rows?: number, platform?: 'urskola' | 'urplay' | 'uraccess', typicalAgeRange?: Array<'preschool' | 'primary0-3' | 'primary4-6' | 'primary7-9' | 'secondary' | 'university' | 'folkhighschool' | 'komvuxgrundvux' | 'teachereducation' | 'schoolvux' | 'specialschool' | 'popularadulteducation' | 'specialschoolprimary' | 'specialschoolsecondary' | 'specialschooladults' | 'adults' | 'children'>, options?: any) {
        return KeywordsApiFp(this.configuration).getKeywords(suggest, rows, platform, typicalAgeRange, options)(this.axios, this.basePath);
    }

}


/**
 * LanguagesApi - axios parameter creator
 * @export
 */
export const LanguagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary All languages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLanguages(options: any = {}): RequestArgs {
            const localVarPath = `/languages`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LanguagesApi - functional programming interface
 * @export
 */
export const LanguagesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary All languages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLanguages(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200> {
            const localVarAxiosArgs = LanguagesApiAxiosParamCreator(configuration).getLanguages(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * LanguagesApi - factory interface
 * @export
 */
export const LanguagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary All languages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLanguages(options?: any) {
            return LanguagesApiFp(configuration).getLanguages(options)(axios, basePath);
        },
    };
};

/**
 * LanguagesApi - object-oriented interface
 * @export
 * @class LanguagesApi
 * @extends {BaseAPI}
 */
export class LanguagesApi extends BaseAPI {
    /**
     * 
     * @summary All languages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LanguagesApi
     */
    public getLanguages(options?: any) {
        return LanguagesApiFp(this.configuration).getLanguages(options)(this.axios, this.basePath);
    }

}


/**
 * ProductsApi - axios parameter creator
 * @export
 */
export const ProductsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Product search
         * @param {boolean} [availabilityEnding] Filter programs by availability, only including the ones whoose availability is going to end in the next five days Aliased to the deprecated &#x60;last_chance&#x60; parameter 
         * @param {string} [category] Filter by category, the available categories can be fetched from the categories endpoint &#x60;/categories&#x60; 
         * @param {string} [emotional] Filter by emotional tag
         * @param {boolean} [facet] Aggregate term facets for the different fields. The sort order is not defined.  * &#x60;product_type&#x60; * &#x60;format&#x60; * &#x60;keywords&#x60; * &#x60;typical_age_range&#x60; * &#x60;languages&#x60; * &#x60;subtitle_languages&#x60; * &#x60;subject_tree&#x60; * &#x60;categories&#x60; * &#x60;has_teacher_resource&#x60; 
         * @param {'audio' | 'video'} [format] Filter by audio or video
         * @param {boolean} [hasTeacherResource] Filter by programs that have attached teacher resources
         * @param {Array<string>} [id] Filter by UR product id
         * @param {'aii' | 'alb' | 'amh' | 'ara' | 'bos' | 'bul' | 'cat' | 'che' | 'chi' | 'ckb' | 'cld' | 'cze' | 'dan' | 'dut' | 'eng' | 'est' | 'fil' | 'fin' | 'fiu' | 'fre' | 'ger' | 'gre' | 'heb' | 'hun' | 'ice' | 'ita' | 'jpn' | 'kaz' | 'kur' | 'lav' | 'lit' | 'mis' | 'mlt' | 'nor' | 'per' | 'pol' | 'por' | 'prs' | 'pus' | 'rmu' | 'rom' | 'rom-arli' | 'rom-kaal' | 'rom-keld' | 'rom-lova' | 'rum' | 'run' | 'rus' | 'scr' | 'sgn-GBR' | 'sgn-SWE' | 'sju' | 'slo' | 'slv' | 'sma' | 'sme' | 'smj' | 'som' | 'spa' | 'srp' | 'swa' | 'swe' | 'tha' | 'tir' | 'tur' | 'yid'} [language] Filter by spoken language. Available values extends ISO 639-3 with languages not present in the standard
         * @param {'A1' | 'A2' | 'B1' | 'B2' | 'C1'} [languageLevel] Filter by language level
         * @param {'urskola' | 'urplay' | 'uraccess'} [platform] Filter by availability on urskola, urplay, uraccess
         * @param {'program' | 'series' | 'super_series'} [productType] Filter by program, series, super_series
         * @param {string} [query] Search query
         * @param {number} [rows] How many results to return, i.e limit
         * @param {boolean} [singlesAndSeries] Filter by Singles and Series
         * @param {'availability_ending' | 'duration' | 'latest' | 'modified' | 'published' | 'most_shared' | 'start_date' | 'title' | 'most_viewed' | 'score_and_pubdate'} [sort] Sort query by: * &#x60;availability_ending&#x60; - product availability, ending soonest (descending) * &#x60;duration&#x60; - duration descending * &#x60;latest&#x60; - latest broadcast date * &#x60;modified&#x60; - modified descending * &#x60;published&#x60; - digital publishing date (descending) * &#x60;most_shared&#x60; - most shared descending, depends on platform  * &#x60;start_date&#x60; - product availability, starting soonest (descending) * &#x60;title&#x60; - title ascending * &#x60;most_viewed&#x60; - most viewed descending, depends on platform * &#x60;score_and_pubdate&#x60; - score and published date 
         * @param {number} [start] From where to start returning results, i.e offset
         * @param {string} [subjectTree] Case insensitive subject tree name, i.e. \&quot;pedagogiska fr√•gor/it, medier och digital kompetens\&quot;
         * @param {Array<'preschool' | 'primary0-3' | 'primary4-6' | 'primary7-9' | 'secondary' | 'university' | 'folkhighschool' | 'komvuxgrundvux' | 'teachereducation' | 'schoolvux' | 'specialschool' | 'popularadulteducation' | 'specialschoolprimary' | 'specialschoolsecondary' | 'specialschooladults' | 'adults' | 'children'>} [typicalAgeRange] &lt;b&gt;NOTE:&lt;/b&gt;&lt;br/&gt; \&#39;children\&#39; &#x3D; (preschool OR primary0-3 OR primary4-6) &lt;br/&gt; \&#39;adults\&#39; &#x3D; (primary7-9 OR secondary OR university OR folkhighschool OR komvuxgrundvux OR teachereducation OR schoolvux OR specialschool OR popularadulteducation OR specialschoolprimary OR specialschoolsecondary OR specialschooladults)
         * @param {boolean} [withAudioDescription] Filter by Audio Description (Syntolkat)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productSearch(availabilityEnding?: boolean, category?: string, emotional?: string, facet?: boolean, format?: 'audio' | 'video', hasTeacherResource?: boolean, id?: Array<string>, language?: 'aii' | 'alb' | 'amh' | 'ara' | 'bos' | 'bul' | 'cat' | 'che' | 'chi' | 'ckb' | 'cld' | 'cze' | 'dan' | 'dut' | 'eng' | 'est' | 'fil' | 'fin' | 'fiu' | 'fre' | 'ger' | 'gre' | 'heb' | 'hun' | 'ice' | 'ita' | 'jpn' | 'kaz' | 'kur' | 'lav' | 'lit' | 'mis' | 'mlt' | 'nor' | 'per' | 'pol' | 'por' | 'prs' | 'pus' | 'rmu' | 'rom' | 'rom-arli' | 'rom-kaal' | 'rom-keld' | 'rom-lova' | 'rum' | 'run' | 'rus' | 'scr' | 'sgn-GBR' | 'sgn-SWE' | 'sju' | 'slo' | 'slv' | 'sma' | 'sme' | 'smj' | 'som' | 'spa' | 'srp' | 'swa' | 'swe' | 'tha' | 'tir' | 'tur' | 'yid', languageLevel?: 'A1' | 'A2' | 'B1' | 'B2' | 'C1', platform?: 'urskola' | 'urplay' | 'uraccess', productType?: 'program' | 'series' | 'super_series', query?: string, rows?: number, singlesAndSeries?: boolean, sort?: 'availability_ending' | 'duration' | 'latest' | 'modified' | 'published' | 'most_shared' | 'start_date' | 'title' | 'most_viewed' | 'score_and_pubdate', start?: number, subjectTree?: string, typicalAgeRange?: Array<'preschool' | 'primary0-3' | 'primary4-6' | 'primary7-9' | 'secondary' | 'university' | 'folkhighschool' | 'komvuxgrundvux' | 'teachereducation' | 'schoolvux' | 'specialschool' | 'popularadulteducation' | 'specialschoolprimary' | 'specialschoolsecondary' | 'specialschooladults' | 'adults' | 'children'>, withAudioDescription?: boolean, options: any = {}): RequestArgs {
            const localVarPath = `/search`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (availabilityEnding !== undefined) {
                localVarQueryParameter['availability_ending'] = availabilityEnding;
            }

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (emotional !== undefined) {
                localVarQueryParameter['emotional'] = emotional;
            }

            if (facet !== undefined) {
                localVarQueryParameter['facet'] = facet;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (hasTeacherResource !== undefined) {
                localVarQueryParameter['has_teacher_resource'] = hasTeacherResource;
            }

            if (id) {
                localVarQueryParameter['id[]'] = id;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (languageLevel !== undefined) {
                localVarQueryParameter['language_level'] = languageLevel;
            }

            if (platform !== undefined) {
                localVarQueryParameter['platform'] = platform;
            }

            if (productType !== undefined) {
                localVarQueryParameter['product_type'] = productType;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (rows !== undefined) {
                localVarQueryParameter['rows'] = rows;
            }

            if (singlesAndSeries !== undefined) {
                localVarQueryParameter['singles_and_series'] = singlesAndSeries;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (subjectTree !== undefined) {
                localVarQueryParameter['subject_tree'] = subjectTree;
            }

            if (typicalAgeRange) {
                localVarQueryParameter['typical_age_range[]'] = typicalAgeRange;
            }

            if (withAudioDescription !== undefined) {
                localVarQueryParameter['with_audio_description'] = withAudioDescription;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsApi - functional programming interface
 * @export
 */
export const ProductsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Product search
         * @param {boolean} [availabilityEnding] Filter programs by availability, only including the ones whoose availability is going to end in the next five days Aliased to the deprecated &#x60;last_chance&#x60; parameter 
         * @param {string} [category] Filter by category, the available categories can be fetched from the categories endpoint &#x60;/categories&#x60; 
         * @param {string} [emotional] Filter by emotional tag
         * @param {boolean} [facet] Aggregate term facets for the different fields. The sort order is not defined.  * &#x60;product_type&#x60; * &#x60;format&#x60; * &#x60;keywords&#x60; * &#x60;typical_age_range&#x60; * &#x60;languages&#x60; * &#x60;subtitle_languages&#x60; * &#x60;subject_tree&#x60; * &#x60;categories&#x60; * &#x60;has_teacher_resource&#x60; 
         * @param {'audio' | 'video'} [format] Filter by audio or video
         * @param {boolean} [hasTeacherResource] Filter by programs that have attached teacher resources
         * @param {Array<string>} [id] Filter by UR product id
         * @param {'aii' | 'alb' | 'amh' | 'ara' | 'bos' | 'bul' | 'cat' | 'che' | 'chi' | 'ckb' | 'cld' | 'cze' | 'dan' | 'dut' | 'eng' | 'est' | 'fil' | 'fin' | 'fiu' | 'fre' | 'ger' | 'gre' | 'heb' | 'hun' | 'ice' | 'ita' | 'jpn' | 'kaz' | 'kur' | 'lav' | 'lit' | 'mis' | 'mlt' | 'nor' | 'per' | 'pol' | 'por' | 'prs' | 'pus' | 'rmu' | 'rom' | 'rom-arli' | 'rom-kaal' | 'rom-keld' | 'rom-lova' | 'rum' | 'run' | 'rus' | 'scr' | 'sgn-GBR' | 'sgn-SWE' | 'sju' | 'slo' | 'slv' | 'sma' | 'sme' | 'smj' | 'som' | 'spa' | 'srp' | 'swa' | 'swe' | 'tha' | 'tir' | 'tur' | 'yid'} [language] Filter by spoken language. Available values extends ISO 639-3 with languages not present in the standard
         * @param {'A1' | 'A2' | 'B1' | 'B2' | 'C1'} [languageLevel] Filter by language level
         * @param {'urskola' | 'urplay' | 'uraccess'} [platform] Filter by availability on urskola, urplay, uraccess
         * @param {'program' | 'series' | 'super_series'} [productType] Filter by program, series, super_series
         * @param {string} [query] Search query
         * @param {number} [rows] How many results to return, i.e limit
         * @param {boolean} [singlesAndSeries] Filter by Singles and Series
         * @param {'availability_ending' | 'duration' | 'latest' | 'modified' | 'published' | 'most_shared' | 'start_date' | 'title' | 'most_viewed' | 'score_and_pubdate'} [sort] Sort query by: * &#x60;availability_ending&#x60; - product availability, ending soonest (descending) * &#x60;duration&#x60; - duration descending * &#x60;latest&#x60; - latest broadcast date * &#x60;modified&#x60; - modified descending * &#x60;published&#x60; - digital publishing date (descending) * &#x60;most_shared&#x60; - most shared descending, depends on platform  * &#x60;start_date&#x60; - product availability, starting soonest (descending) * &#x60;title&#x60; - title ascending * &#x60;most_viewed&#x60; - most viewed descending, depends on platform * &#x60;score_and_pubdate&#x60; - score and published date 
         * @param {number} [start] From where to start returning results, i.e offset
         * @param {string} [subjectTree] Case insensitive subject tree name, i.e. \&quot;pedagogiska fr√•gor/it, medier och digital kompetens\&quot;
         * @param {Array<'preschool' | 'primary0-3' | 'primary4-6' | 'primary7-9' | 'secondary' | 'university' | 'folkhighschool' | 'komvuxgrundvux' | 'teachereducation' | 'schoolvux' | 'specialschool' | 'popularadulteducation' | 'specialschoolprimary' | 'specialschoolsecondary' | 'specialschooladults' | 'adults' | 'children'>} [typicalAgeRange] &lt;b&gt;NOTE:&lt;/b&gt;&lt;br/&gt; \&#39;children\&#39; &#x3D; (preschool OR primary0-3 OR primary4-6) &lt;br/&gt; \&#39;adults\&#39; &#x3D; (primary7-9 OR secondary OR university OR folkhighschool OR komvuxgrundvux OR teachereducation OR schoolvux OR specialschool OR popularadulteducation OR specialschoolprimary OR specialschoolsecondary OR specialschooladults)
         * @param {boolean} [withAudioDescription] Filter by Audio Description (Syntolkat)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productSearch(availabilityEnding?: boolean, category?: string, emotional?: string, facet?: boolean, format?: 'audio' | 'video', hasTeacherResource?: boolean, id?: Array<string>, language?: 'aii' | 'alb' | 'amh' | 'ara' | 'bos' | 'bul' | 'cat' | 'che' | 'chi' | 'ckb' | 'cld' | 'cze' | 'dan' | 'dut' | 'eng' | 'est' | 'fil' | 'fin' | 'fiu' | 'fre' | 'ger' | 'gre' | 'heb' | 'hun' | 'ice' | 'ita' | 'jpn' | 'kaz' | 'kur' | 'lav' | 'lit' | 'mis' | 'mlt' | 'nor' | 'per' | 'pol' | 'por' | 'prs' | 'pus' | 'rmu' | 'rom' | 'rom-arli' | 'rom-kaal' | 'rom-keld' | 'rom-lova' | 'rum' | 'run' | 'rus' | 'scr' | 'sgn-GBR' | 'sgn-SWE' | 'sju' | 'slo' | 'slv' | 'sma' | 'sme' | 'smj' | 'som' | 'spa' | 'srp' | 'swa' | 'swe' | 'tha' | 'tir' | 'tur' | 'yid', languageLevel?: 'A1' | 'A2' | 'B1' | 'B2' | 'C1', platform?: 'urskola' | 'urplay' | 'uraccess', productType?: 'program' | 'series' | 'super_series', query?: string, rows?: number, singlesAndSeries?: boolean, sort?: 'availability_ending' | 'duration' | 'latest' | 'modified' | 'published' | 'most_shared' | 'start_date' | 'title' | 'most_viewed' | 'score_and_pubdate', start?: number, subjectTree?: string, typicalAgeRange?: Array<'preschool' | 'primary0-3' | 'primary4-6' | 'primary7-9' | 'secondary' | 'university' | 'folkhighschool' | 'komvuxgrundvux' | 'teachereducation' | 'schoolvux' | 'specialschool' | 'popularadulteducation' | 'specialschoolprimary' | 'specialschoolsecondary' | 'specialschooladults' | 'adults' | 'children'>, withAudioDescription?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductSearchResponse> {
            const localVarAxiosArgs = ProductsApiAxiosParamCreator(configuration).productSearch(availabilityEnding, category, emotional, facet, format, hasTeacherResource, id, language, languageLevel, platform, productType, query, rows, singlesAndSeries, sort, start, subjectTree, typicalAgeRange, withAudioDescription, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ProductsApi - factory interface
 * @export
 */
export const ProductsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Product search
         * @param {boolean} [availabilityEnding] Filter programs by availability, only including the ones whoose availability is going to end in the next five days Aliased to the deprecated &#x60;last_chance&#x60; parameter 
         * @param {string} [category] Filter by category, the available categories can be fetched from the categories endpoint &#x60;/categories&#x60; 
         * @param {string} [emotional] Filter by emotional tag
         * @param {boolean} [facet] Aggregate term facets for the different fields. The sort order is not defined.  * &#x60;product_type&#x60; * &#x60;format&#x60; * &#x60;keywords&#x60; * &#x60;typical_age_range&#x60; * &#x60;languages&#x60; * &#x60;subtitle_languages&#x60; * &#x60;subject_tree&#x60; * &#x60;categories&#x60; * &#x60;has_teacher_resource&#x60; 
         * @param {'audio' | 'video'} [format] Filter by audio or video
         * @param {boolean} [hasTeacherResource] Filter by programs that have attached teacher resources
         * @param {Array<string>} [id] Filter by UR product id
         * @param {'aii' | 'alb' | 'amh' | 'ara' | 'bos' | 'bul' | 'cat' | 'che' | 'chi' | 'ckb' | 'cld' | 'cze' | 'dan' | 'dut' | 'eng' | 'est' | 'fil' | 'fin' | 'fiu' | 'fre' | 'ger' | 'gre' | 'heb' | 'hun' | 'ice' | 'ita' | 'jpn' | 'kaz' | 'kur' | 'lav' | 'lit' | 'mis' | 'mlt' | 'nor' | 'per' | 'pol' | 'por' | 'prs' | 'pus' | 'rmu' | 'rom' | 'rom-arli' | 'rom-kaal' | 'rom-keld' | 'rom-lova' | 'rum' | 'run' | 'rus' | 'scr' | 'sgn-GBR' | 'sgn-SWE' | 'sju' | 'slo' | 'slv' | 'sma' | 'sme' | 'smj' | 'som' | 'spa' | 'srp' | 'swa' | 'swe' | 'tha' | 'tir' | 'tur' | 'yid'} [language] Filter by spoken language. Available values extends ISO 639-3 with languages not present in the standard
         * @param {'A1' | 'A2' | 'B1' | 'B2' | 'C1'} [languageLevel] Filter by language level
         * @param {'urskola' | 'urplay' | 'uraccess'} [platform] Filter by availability on urskola, urplay, uraccess
         * @param {'program' | 'series' | 'super_series'} [productType] Filter by program, series, super_series
         * @param {string} [query] Search query
         * @param {number} [rows] How many results to return, i.e limit
         * @param {boolean} [singlesAndSeries] Filter by Singles and Series
         * @param {'availability_ending' | 'duration' | 'latest' | 'modified' | 'published' | 'most_shared' | 'start_date' | 'title' | 'most_viewed' | 'score_and_pubdate'} [sort] Sort query by: * &#x60;availability_ending&#x60; - product availability, ending soonest (descending) * &#x60;duration&#x60; - duration descending * &#x60;latest&#x60; - latest broadcast date * &#x60;modified&#x60; - modified descending * &#x60;published&#x60; - digital publishing date (descending) * &#x60;most_shared&#x60; - most shared descending, depends on platform  * &#x60;start_date&#x60; - product availability, starting soonest (descending) * &#x60;title&#x60; - title ascending * &#x60;most_viewed&#x60; - most viewed descending, depends on platform * &#x60;score_and_pubdate&#x60; - score and published date 
         * @param {number} [start] From where to start returning results, i.e offset
         * @param {string} [subjectTree] Case insensitive subject tree name, i.e. \&quot;pedagogiska fr√•gor/it, medier och digital kompetens\&quot;
         * @param {Array<'preschool' | 'primary0-3' | 'primary4-6' | 'primary7-9' | 'secondary' | 'university' | 'folkhighschool' | 'komvuxgrundvux' | 'teachereducation' | 'schoolvux' | 'specialschool' | 'popularadulteducation' | 'specialschoolprimary' | 'specialschoolsecondary' | 'specialschooladults' | 'adults' | 'children'>} [typicalAgeRange] &lt;b&gt;NOTE:&lt;/b&gt;&lt;br/&gt; \&#39;children\&#39; &#x3D; (preschool OR primary0-3 OR primary4-6) &lt;br/&gt; \&#39;adults\&#39; &#x3D; (primary7-9 OR secondary OR university OR folkhighschool OR komvuxgrundvux OR teachereducation OR schoolvux OR specialschool OR popularadulteducation OR specialschoolprimary OR specialschoolsecondary OR specialschooladults)
         * @param {boolean} [withAudioDescription] Filter by Audio Description (Syntolkat)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productSearch(availabilityEnding?: boolean, category?: string, emotional?: string, facet?: boolean, format?: 'audio' | 'video', hasTeacherResource?: boolean, id?: Array<string>, language?: 'aii' | 'alb' | 'amh' | 'ara' | 'bos' | 'bul' | 'cat' | 'che' | 'chi' | 'ckb' | 'cld' | 'cze' | 'dan' | 'dut' | 'eng' | 'est' | 'fil' | 'fin' | 'fiu' | 'fre' | 'ger' | 'gre' | 'heb' | 'hun' | 'ice' | 'ita' | 'jpn' | 'kaz' | 'kur' | 'lav' | 'lit' | 'mis' | 'mlt' | 'nor' | 'per' | 'pol' | 'por' | 'prs' | 'pus' | 'rmu' | 'rom' | 'rom-arli' | 'rom-kaal' | 'rom-keld' | 'rom-lova' | 'rum' | 'run' | 'rus' | 'scr' | 'sgn-GBR' | 'sgn-SWE' | 'sju' | 'slo' | 'slv' | 'sma' | 'sme' | 'smj' | 'som' | 'spa' | 'srp' | 'swa' | 'swe' | 'tha' | 'tir' | 'tur' | 'yid', languageLevel?: 'A1' | 'A2' | 'B1' | 'B2' | 'C1', platform?: 'urskola' | 'urplay' | 'uraccess', productType?: 'program' | 'series' | 'super_series', query?: string, rows?: number, singlesAndSeries?: boolean, sort?: 'availability_ending' | 'duration' | 'latest' | 'modified' | 'published' | 'most_shared' | 'start_date' | 'title' | 'most_viewed' | 'score_and_pubdate', start?: number, subjectTree?: string, typicalAgeRange?: Array<'preschool' | 'primary0-3' | 'primary4-6' | 'primary7-9' | 'secondary' | 'university' | 'folkhighschool' | 'komvuxgrundvux' | 'teachereducation' | 'schoolvux' | 'specialschool' | 'popularadulteducation' | 'specialschoolprimary' | 'specialschoolsecondary' | 'specialschooladults' | 'adults' | 'children'>, withAudioDescription?: boolean, options?: any) {
            return ProductsApiFp(configuration).productSearch(availabilityEnding, category, emotional, facet, format, hasTeacherResource, id, language, languageLevel, platform, productType, query, rows, singlesAndSeries, sort, start, subjectTree, typicalAgeRange, withAudioDescription, options)(axios, basePath);
        },
    };
};

/**
 * ProductsApi - object-oriented interface
 * @export
 * @class ProductsApi
 * @extends {BaseAPI}
 */
export class ProductsApi extends BaseAPI {
    /**
     * 
     * @summary Product search
     * @param {boolean} [availabilityEnding] Filter programs by availability, only including the ones whoose availability is going to end in the next five days Aliased to the deprecated &#x60;last_chance&#x60; parameter 
     * @param {string} [category] Filter by category, the available categories can be fetched from the categories endpoint &#x60;/categories&#x60; 
     * @param {string} [emotional] Filter by emotional tag
     * @param {boolean} [facet] Aggregate term facets for the different fields. The sort order is not defined.  * &#x60;product_type&#x60; * &#x60;format&#x60; * &#x60;keywords&#x60; * &#x60;typical_age_range&#x60; * &#x60;languages&#x60; * &#x60;subtitle_languages&#x60; * &#x60;subject_tree&#x60; * &#x60;categories&#x60; * &#x60;has_teacher_resource&#x60; 
     * @param {'audio' | 'video'} [format] Filter by audio or video
     * @param {boolean} [hasTeacherResource] Filter by programs that have attached teacher resources
     * @param {Array<string>} [id] Filter by UR product id
     * @param {'aii' | 'alb' | 'amh' | 'ara' | 'bos' | 'bul' | 'cat' | 'che' | 'chi' | 'ckb' | 'cld' | 'cze' | 'dan' | 'dut' | 'eng' | 'est' | 'fil' | 'fin' | 'fiu' | 'fre' | 'ger' | 'gre' | 'heb' | 'hun' | 'ice' | 'ita' | 'jpn' | 'kaz' | 'kur' | 'lav' | 'lit' | 'mis' | 'mlt' | 'nor' | 'per' | 'pol' | 'por' | 'prs' | 'pus' | 'rmu' | 'rom' | 'rom-arli' | 'rom-kaal' | 'rom-keld' | 'rom-lova' | 'rum' | 'run' | 'rus' | 'scr' | 'sgn-GBR' | 'sgn-SWE' | 'sju' | 'slo' | 'slv' | 'sma' | 'sme' | 'smj' | 'som' | 'spa' | 'srp' | 'swa' | 'swe' | 'tha' | 'tir' | 'tur' | 'yid'} [language] Filter by spoken language. Available values extends ISO 639-3 with languages not present in the standard
     * @param {'A1' | 'A2' | 'B1' | 'B2' | 'C1'} [languageLevel] Filter by language level
     * @param {'urskola' | 'urplay' | 'uraccess'} [platform] Filter by availability on urskola, urplay, uraccess
     * @param {'program' | 'series' | 'super_series'} [productType] Filter by program, series, super_series
     * @param {string} [query] Search query
     * @param {number} [rows] How many results to return, i.e limit
     * @param {boolean} [singlesAndSeries] Filter by Singles and Series
     * @param {'availability_ending' | 'duration' | 'latest' | 'modified' | 'published' | 'most_shared' | 'start_date' | 'title' | 'most_viewed' | 'score_and_pubdate'} [sort] Sort query by: * &#x60;availability_ending&#x60; - product availability, ending soonest (descending) * &#x60;duration&#x60; - duration descending * &#x60;latest&#x60; - latest broadcast date * &#x60;modified&#x60; - modified descending * &#x60;published&#x60; - digital publishing date (descending) * &#x60;most_shared&#x60; - most shared descending, depends on platform  * &#x60;start_date&#x60; - product availability, starting soonest (descending) * &#x60;title&#x60; - title ascending * &#x60;most_viewed&#x60; - most viewed descending, depends on platform * &#x60;score_and_pubdate&#x60; - score and published date 
     * @param {number} [start] From where to start returning results, i.e offset
     * @param {string} [subjectTree] Case insensitive subject tree name, i.e. \&quot;pedagogiska fr√•gor/it, medier och digital kompetens\&quot;
     * @param {Array<'preschool' | 'primary0-3' | 'primary4-6' | 'primary7-9' | 'secondary' | 'university' | 'folkhighschool' | 'komvuxgrundvux' | 'teachereducation' | 'schoolvux' | 'specialschool' | 'popularadulteducation' | 'specialschoolprimary' | 'specialschoolsecondary' | 'specialschooladults' | 'adults' | 'children'>} [typicalAgeRange] &lt;b&gt;NOTE:&lt;/b&gt;&lt;br/&gt; \&#39;children\&#39; &#x3D; (preschool OR primary0-3 OR primary4-6) &lt;br/&gt; \&#39;adults\&#39; &#x3D; (primary7-9 OR secondary OR university OR folkhighschool OR komvuxgrundvux OR teachereducation OR schoolvux OR specialschool OR popularadulteducation OR specialschoolprimary OR specialschoolsecondary OR specialschooladults)
     * @param {boolean} [withAudioDescription] Filter by Audio Description (Syntolkat)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public productSearch(availabilityEnding?: boolean, category?: string, emotional?: string, facet?: boolean, format?: 'audio' | 'video', hasTeacherResource?: boolean, id?: Array<string>, language?: 'aii' | 'alb' | 'amh' | 'ara' | 'bos' | 'bul' | 'cat' | 'che' | 'chi' | 'ckb' | 'cld' | 'cze' | 'dan' | 'dut' | 'eng' | 'est' | 'fil' | 'fin' | 'fiu' | 'fre' | 'ger' | 'gre' | 'heb' | 'hun' | 'ice' | 'ita' | 'jpn' | 'kaz' | 'kur' | 'lav' | 'lit' | 'mis' | 'mlt' | 'nor' | 'per' | 'pol' | 'por' | 'prs' | 'pus' | 'rmu' | 'rom' | 'rom-arli' | 'rom-kaal' | 'rom-keld' | 'rom-lova' | 'rum' | 'run' | 'rus' | 'scr' | 'sgn-GBR' | 'sgn-SWE' | 'sju' | 'slo' | 'slv' | 'sma' | 'sme' | 'smj' | 'som' | 'spa' | 'srp' | 'swa' | 'swe' | 'tha' | 'tir' | 'tur' | 'yid', languageLevel?: 'A1' | 'A2' | 'B1' | 'B2' | 'C1', platform?: 'urskola' | 'urplay' | 'uraccess', productType?: 'program' | 'series' | 'super_series', query?: string, rows?: number, singlesAndSeries?: boolean, sort?: 'availability_ending' | 'duration' | 'latest' | 'modified' | 'published' | 'most_shared' | 'start_date' | 'title' | 'most_viewed' | 'score_and_pubdate', start?: number, subjectTree?: string, typicalAgeRange?: Array<'preschool' | 'primary0-3' | 'primary4-6' | 'primary7-9' | 'secondary' | 'university' | 'folkhighschool' | 'komvuxgrundvux' | 'teachereducation' | 'schoolvux' | 'specialschool' | 'popularadulteducation' | 'specialschoolprimary' | 'specialschoolsecondary' | 'specialschooladults' | 'adults' | 'children'>, withAudioDescription?: boolean, options?: any) {
        return ProductsApiFp(this.configuration).productSearch(availabilityEnding, category, emotional, facet, format, hasTeacherResource, id, language, languageLevel, platform, productType, query, rows, singlesAndSeries, sort, start, subjectTree, typicalAgeRange, withAudioDescription, options)(this.axios, this.basePath);
    }

}


/**
 * ProgramsApi - axios parameter creator
 * @export
 */
export const ProgramsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves a program
         * @param {number} id Program ID
         * @param {'series.programs'} [includes] Expand programs within series
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProgramById(id: number, includes?: 'series.programs', options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getProgramById.');
            }
            const localVarPath = `/programs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (includes !== undefined) {
                localVarQueryParameter['includes'] = includes;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieves programs related to another program
         * @param {number} id Program ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelatedProgramsById(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getRelatedProgramsById.');
            }
            const localVarPath = `/programs/{id}/related`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Imports product and all child products
         * @param {number} id import ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importProductById(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling importProductById.');
            }
            const localVarPath = `/import/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProgramsApi - functional programming interface
 * @export
 */
export const ProgramsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves a program
         * @param {number} id Program ID
         * @param {'series.programs'} [includes] Expand programs within series
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProgramById(id: number, includes?: 'series.programs', options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Program> {
            const localVarAxiosArgs = ProgramsApiAxiosParamCreator(configuration).getProgramById(id, includes, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Retrieves programs related to another program
         * @param {number} id Program ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelatedProgramsById(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002> {
            const localVarAxiosArgs = ProgramsApiAxiosParamCreator(configuration).getRelatedProgramsById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Imports product and all child products
         * @param {number} id import ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importProductById(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2003> {
            const localVarAxiosArgs = ProgramsApiAxiosParamCreator(configuration).importProductById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ProgramsApi - factory interface
 * @export
 */
export const ProgramsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Retrieves a program
         * @param {number} id Program ID
         * @param {'series.programs'} [includes] Expand programs within series
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProgramById(id: number, includes?: 'series.programs', options?: any) {
            return ProgramsApiFp(configuration).getProgramById(id, includes, options)(axios, basePath);
        },
        /**
         * 
         * @summary Retrieves programs related to another program
         * @param {number} id Program ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelatedProgramsById(id: number, options?: any) {
            return ProgramsApiFp(configuration).getRelatedProgramsById(id, options)(axios, basePath);
        },
        /**
         * 
         * @summary Imports product and all child products
         * @param {number} id import ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importProductById(id: number, options?: any) {
            return ProgramsApiFp(configuration).importProductById(id, options)(axios, basePath);
        },
    };
};

/**
 * ProgramsApi - object-oriented interface
 * @export
 * @class ProgramsApi
 * @extends {BaseAPI}
 */
export class ProgramsApi extends BaseAPI {
    /**
     * 
     * @summary Retrieves a program
     * @param {number} id Program ID
     * @param {'series.programs'} [includes] Expand programs within series
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApi
     */
    public getProgramById(id: number, includes?: 'series.programs', options?: any) {
        return ProgramsApiFp(this.configuration).getProgramById(id, includes, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Retrieves programs related to another program
     * @param {number} id Program ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApi
     */
    public getRelatedProgramsById(id: number, options?: any) {
        return ProgramsApiFp(this.configuration).getRelatedProgramsById(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Imports product and all child products
     * @param {number} id import ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApi
     */
    public importProductById(id: number, options?: any) {
        return ProgramsApiFp(this.configuration).importProductById(id, options)(this.axios, this.basePath);
    }

}


/**
 * SearchApi - axios parameter creator
 * @export
 */
export const SearchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Product search
         * @param {boolean} [availabilityEnding] Filter programs by availability, only including the ones whoose availability is going to end in the next five days Aliased to the deprecated &#x60;last_chance&#x60; parameter 
         * @param {string} [category] Filter by category, the available categories can be fetched from the categories endpoint &#x60;/categories&#x60; 
         * @param {string} [emotional] Filter by emotional tag
         * @param {boolean} [facet] Aggregate term facets for the different fields. The sort order is not defined.  * &#x60;product_type&#x60; * &#x60;format&#x60; * &#x60;keywords&#x60; * &#x60;typical_age_range&#x60; * &#x60;languages&#x60; * &#x60;subtitle_languages&#x60; * &#x60;subject_tree&#x60; * &#x60;categories&#x60; * &#x60;has_teacher_resource&#x60; 
         * @param {'audio' | 'video'} [format] Filter by audio or video
         * @param {boolean} [hasTeacherResource] Filter by programs that have attached teacher resources
         * @param {Array<string>} [id] Filter by UR product id
         * @param {'aii' | 'alb' | 'amh' | 'ara' | 'bos' | 'bul' | 'cat' | 'che' | 'chi' | 'ckb' | 'cld' | 'cze' | 'dan' | 'dut' | 'eng' | 'est' | 'fil' | 'fin' | 'fiu' | 'fre' | 'ger' | 'gre' | 'heb' | 'hun' | 'ice' | 'ita' | 'jpn' | 'kaz' | 'kur' | 'lav' | 'lit' | 'mis' | 'mlt' | 'nor' | 'per' | 'pol' | 'por' | 'prs' | 'pus' | 'rmu' | 'rom' | 'rom-arli' | 'rom-kaal' | 'rom-keld' | 'rom-lova' | 'rum' | 'run' | 'rus' | 'scr' | 'sgn-GBR' | 'sgn-SWE' | 'sju' | 'slo' | 'slv' | 'sma' | 'sme' | 'smj' | 'som' | 'spa' | 'srp' | 'swa' | 'swe' | 'tha' | 'tir' | 'tur' | 'yid'} [language] Filter by spoken language. Available values extends ISO 639-3 with languages not present in the standard
         * @param {'A1' | 'A2' | 'B1' | 'B2' | 'C1'} [languageLevel] Filter by language level
         * @param {'urskola' | 'urplay' | 'uraccess'} [platform] Filter by availability on urskola, urplay, uraccess
         * @param {'program' | 'series' | 'super_series'} [productType] Filter by program, series, super_series
         * @param {string} [query] Search query
         * @param {number} [rows] How many results to return, i.e limit
         * @param {boolean} [singlesAndSeries] Filter by Singles and Series
         * @param {'availability_ending' | 'duration' | 'latest' | 'modified' | 'published' | 'most_shared' | 'start_date' | 'title' | 'most_viewed' | 'score_and_pubdate'} [sort] Sort query by: * &#x60;availability_ending&#x60; - product availability, ending soonest (descending) * &#x60;duration&#x60; - duration descending * &#x60;latest&#x60; - latest broadcast date * &#x60;modified&#x60; - modified descending * &#x60;published&#x60; - digital publishing date (descending) * &#x60;most_shared&#x60; - most shared descending, depends on platform  * &#x60;start_date&#x60; - product availability, starting soonest (descending) * &#x60;title&#x60; - title ascending * &#x60;most_viewed&#x60; - most viewed descending, depends on platform * &#x60;score_and_pubdate&#x60; - score and published date 
         * @param {number} [start] From where to start returning results, i.e offset
         * @param {string} [subjectTree] Case insensitive subject tree name, i.e. \&quot;pedagogiska fr√•gor/it, medier och digital kompetens\&quot;
         * @param {Array<'preschool' | 'primary0-3' | 'primary4-6' | 'primary7-9' | 'secondary' | 'university' | 'folkhighschool' | 'komvuxgrundvux' | 'teachereducation' | 'schoolvux' | 'specialschool' | 'popularadulteducation' | 'specialschoolprimary' | 'specialschoolsecondary' | 'specialschooladults' | 'adults' | 'children'>} [typicalAgeRange] &lt;b&gt;NOTE:&lt;/b&gt;&lt;br/&gt; \&#39;children\&#39; &#x3D; (preschool OR primary0-3 OR primary4-6) &lt;br/&gt; \&#39;adults\&#39; &#x3D; (primary7-9 OR secondary OR university OR folkhighschool OR komvuxgrundvux OR teachereducation OR schoolvux OR specialschool OR popularadulteducation OR specialschoolprimary OR specialschoolsecondary OR specialschooladults)
         * @param {boolean} [withAudioDescription] Filter by Audio Description (Syntolkat)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productSearch(availabilityEnding?: boolean, category?: string, emotional?: string, facet?: boolean, format?: 'audio' | 'video', hasTeacherResource?: boolean, id?: Array<string>, language?: 'aii' | 'alb' | 'amh' | 'ara' | 'bos' | 'bul' | 'cat' | 'che' | 'chi' | 'ckb' | 'cld' | 'cze' | 'dan' | 'dut' | 'eng' | 'est' | 'fil' | 'fin' | 'fiu' | 'fre' | 'ger' | 'gre' | 'heb' | 'hun' | 'ice' | 'ita' | 'jpn' | 'kaz' | 'kur' | 'lav' | 'lit' | 'mis' | 'mlt' | 'nor' | 'per' | 'pol' | 'por' | 'prs' | 'pus' | 'rmu' | 'rom' | 'rom-arli' | 'rom-kaal' | 'rom-keld' | 'rom-lova' | 'rum' | 'run' | 'rus' | 'scr' | 'sgn-GBR' | 'sgn-SWE' | 'sju' | 'slo' | 'slv' | 'sma' | 'sme' | 'smj' | 'som' | 'spa' | 'srp' | 'swa' | 'swe' | 'tha' | 'tir' | 'tur' | 'yid', languageLevel?: 'A1' | 'A2' | 'B1' | 'B2' | 'C1', platform?: 'urskola' | 'urplay' | 'uraccess', productType?: 'program' | 'series' | 'super_series', query?: string, rows?: number, singlesAndSeries?: boolean, sort?: 'availability_ending' | 'duration' | 'latest' | 'modified' | 'published' | 'most_shared' | 'start_date' | 'title' | 'most_viewed' | 'score_and_pubdate', start?: number, subjectTree?: string, typicalAgeRange?: Array<'preschool' | 'primary0-3' | 'primary4-6' | 'primary7-9' | 'secondary' | 'university' | 'folkhighschool' | 'komvuxgrundvux' | 'teachereducation' | 'schoolvux' | 'specialschool' | 'popularadulteducation' | 'specialschoolprimary' | 'specialschoolsecondary' | 'specialschooladults' | 'adults' | 'children'>, withAudioDescription?: boolean, options: any = {}): RequestArgs {
            const localVarPath = `/search`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (availabilityEnding !== undefined) {
                localVarQueryParameter['availability_ending'] = availabilityEnding;
            }

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (emotional !== undefined) {
                localVarQueryParameter['emotional'] = emotional;
            }

            if (facet !== undefined) {
                localVarQueryParameter['facet'] = facet;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (hasTeacherResource !== undefined) {
                localVarQueryParameter['has_teacher_resource'] = hasTeacherResource;
            }

            if (id) {
                localVarQueryParameter['id[]'] = id;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }

            if (languageLevel !== undefined) {
                localVarQueryParameter['language_level'] = languageLevel;
            }

            if (platform !== undefined) {
                localVarQueryParameter['platform'] = platform;
            }

            if (productType !== undefined) {
                localVarQueryParameter['product_type'] = productType;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (rows !== undefined) {
                localVarQueryParameter['rows'] = rows;
            }

            if (singlesAndSeries !== undefined) {
                localVarQueryParameter['singles_and_series'] = singlesAndSeries;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (subjectTree !== undefined) {
                localVarQueryParameter['subject_tree'] = subjectTree;
            }

            if (typicalAgeRange) {
                localVarQueryParameter['typical_age_range[]'] = typicalAgeRange;
            }

            if (withAudioDescription !== undefined) {
                localVarQueryParameter['with_audio_description'] = withAudioDescription;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SearchApi - functional programming interface
 * @export
 */
export const SearchApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Product search
         * @param {boolean} [availabilityEnding] Filter programs by availability, only including the ones whoose availability is going to end in the next five days Aliased to the deprecated &#x60;last_chance&#x60; parameter 
         * @param {string} [category] Filter by category, the available categories can be fetched from the categories endpoint &#x60;/categories&#x60; 
         * @param {string} [emotional] Filter by emotional tag
         * @param {boolean} [facet] Aggregate term facets for the different fields. The sort order is not defined.  * &#x60;product_type&#x60; * &#x60;format&#x60; * &#x60;keywords&#x60; * &#x60;typical_age_range&#x60; * &#x60;languages&#x60; * &#x60;subtitle_languages&#x60; * &#x60;subject_tree&#x60; * &#x60;categories&#x60; * &#x60;has_teacher_resource&#x60; 
         * @param {'audio' | 'video'} [format] Filter by audio or video
         * @param {boolean} [hasTeacherResource] Filter by programs that have attached teacher resources
         * @param {Array<string>} [id] Filter by UR product id
         * @param {'aii' | 'alb' | 'amh' | 'ara' | 'bos' | 'bul' | 'cat' | 'che' | 'chi' | 'ckb' | 'cld' | 'cze' | 'dan' | 'dut' | 'eng' | 'est' | 'fil' | 'fin' | 'fiu' | 'fre' | 'ger' | 'gre' | 'heb' | 'hun' | 'ice' | 'ita' | 'jpn' | 'kaz' | 'kur' | 'lav' | 'lit' | 'mis' | 'mlt' | 'nor' | 'per' | 'pol' | 'por' | 'prs' | 'pus' | 'rmu' | 'rom' | 'rom-arli' | 'rom-kaal' | 'rom-keld' | 'rom-lova' | 'rum' | 'run' | 'rus' | 'scr' | 'sgn-GBR' | 'sgn-SWE' | 'sju' | 'slo' | 'slv' | 'sma' | 'sme' | 'smj' | 'som' | 'spa' | 'srp' | 'swa' | 'swe' | 'tha' | 'tir' | 'tur' | 'yid'} [language] Filter by spoken language. Available values extends ISO 639-3 with languages not present in the standard
         * @param {'A1' | 'A2' | 'B1' | 'B2' | 'C1'} [languageLevel] Filter by language level
         * @param {'urskola' | 'urplay' | 'uraccess'} [platform] Filter by availability on urskola, urplay, uraccess
         * @param {'program' | 'series' | 'super_series'} [productType] Filter by program, series, super_series
         * @param {string} [query] Search query
         * @param {number} [rows] How many results to return, i.e limit
         * @param {boolean} [singlesAndSeries] Filter by Singles and Series
         * @param {'availability_ending' | 'duration' | 'latest' | 'modified' | 'published' | 'most_shared' | 'start_date' | 'title' | 'most_viewed' | 'score_and_pubdate'} [sort] Sort query by: * &#x60;availability_ending&#x60; - product availability, ending soonest (descending) * &#x60;duration&#x60; - duration descending * &#x60;latest&#x60; - latest broadcast date * &#x60;modified&#x60; - modified descending * &#x60;published&#x60; - digital publishing date (descending) * &#x60;most_shared&#x60; - most shared descending, depends on platform  * &#x60;start_date&#x60; - product availability, starting soonest (descending) * &#x60;title&#x60; - title ascending * &#x60;most_viewed&#x60; - most viewed descending, depends on platform * &#x60;score_and_pubdate&#x60; - score and published date 
         * @param {number} [start] From where to start returning results, i.e offset
         * @param {string} [subjectTree] Case insensitive subject tree name, i.e. \&quot;pedagogiska fr√•gor/it, medier och digital kompetens\&quot;
         * @param {Array<'preschool' | 'primary0-3' | 'primary4-6' | 'primary7-9' | 'secondary' | 'university' | 'folkhighschool' | 'komvuxgrundvux' | 'teachereducation' | 'schoolvux' | 'specialschool' | 'popularadulteducation' | 'specialschoolprimary' | 'specialschoolsecondary' | 'specialschooladults' | 'adults' | 'children'>} [typicalAgeRange] &lt;b&gt;NOTE:&lt;/b&gt;&lt;br/&gt; \&#39;children\&#39; &#x3D; (preschool OR primary0-3 OR primary4-6) &lt;br/&gt; \&#39;adults\&#39; &#x3D; (primary7-9 OR secondary OR university OR folkhighschool OR komvuxgrundvux OR teachereducation OR schoolvux OR specialschool OR popularadulteducation OR specialschoolprimary OR specialschoolsecondary OR specialschooladults)
         * @param {boolean} [withAudioDescription] Filter by Audio Description (Syntolkat)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productSearch(availabilityEnding?: boolean, category?: string, emotional?: string, facet?: boolean, format?: 'audio' | 'video', hasTeacherResource?: boolean, id?: Array<string>, language?: 'aii' | 'alb' | 'amh' | 'ara' | 'bos' | 'bul' | 'cat' | 'che' | 'chi' | 'ckb' | 'cld' | 'cze' | 'dan' | 'dut' | 'eng' | 'est' | 'fil' | 'fin' | 'fiu' | 'fre' | 'ger' | 'gre' | 'heb' | 'hun' | 'ice' | 'ita' | 'jpn' | 'kaz' | 'kur' | 'lav' | 'lit' | 'mis' | 'mlt' | 'nor' | 'per' | 'pol' | 'por' | 'prs' | 'pus' | 'rmu' | 'rom' | 'rom-arli' | 'rom-kaal' | 'rom-keld' | 'rom-lova' | 'rum' | 'run' | 'rus' | 'scr' | 'sgn-GBR' | 'sgn-SWE' | 'sju' | 'slo' | 'slv' | 'sma' | 'sme' | 'smj' | 'som' | 'spa' | 'srp' | 'swa' | 'swe' | 'tha' | 'tir' | 'tur' | 'yid', languageLevel?: 'A1' | 'A2' | 'B1' | 'B2' | 'C1', platform?: 'urskola' | 'urplay' | 'uraccess', productType?: 'program' | 'series' | 'super_series', query?: string, rows?: number, singlesAndSeries?: boolean, sort?: 'availability_ending' | 'duration' | 'latest' | 'modified' | 'published' | 'most_shared' | 'start_date' | 'title' | 'most_viewed' | 'score_and_pubdate', start?: number, subjectTree?: string, typicalAgeRange?: Array<'preschool' | 'primary0-3' | 'primary4-6' | 'primary7-9' | 'secondary' | 'university' | 'folkhighschool' | 'komvuxgrundvux' | 'teachereducation' | 'schoolvux' | 'specialschool' | 'popularadulteducation' | 'specialschoolprimary' | 'specialschoolsecondary' | 'specialschooladults' | 'adults' | 'children'>, withAudioDescription?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductSearchResponse> {
            const localVarAxiosArgs = SearchApiAxiosParamCreator(configuration).productSearch(availabilityEnding, category, emotional, facet, format, hasTeacherResource, id, language, languageLevel, platform, productType, query, rows, singlesAndSeries, sort, start, subjectTree, typicalAgeRange, withAudioDescription, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SearchApi - factory interface
 * @export
 */
export const SearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Product search
         * @param {boolean} [availabilityEnding] Filter programs by availability, only including the ones whoose availability is going to end in the next five days Aliased to the deprecated &#x60;last_chance&#x60; parameter 
         * @param {string} [category] Filter by category, the available categories can be fetched from the categories endpoint &#x60;/categories&#x60; 
         * @param {string} [emotional] Filter by emotional tag
         * @param {boolean} [facet] Aggregate term facets for the different fields. The sort order is not defined.  * &#x60;product_type&#x60; * &#x60;format&#x60; * &#x60;keywords&#x60; * &#x60;typical_age_range&#x60; * &#x60;languages&#x60; * &#x60;subtitle_languages&#x60; * &#x60;subject_tree&#x60; * &#x60;categories&#x60; * &#x60;has_teacher_resource&#x60; 
         * @param {'audio' | 'video'} [format] Filter by audio or video
         * @param {boolean} [hasTeacherResource] Filter by programs that have attached teacher resources
         * @param {Array<string>} [id] Filter by UR product id
         * @param {'aii' | 'alb' | 'amh' | 'ara' | 'bos' | 'bul' | 'cat' | 'che' | 'chi' | 'ckb' | 'cld' | 'cze' | 'dan' | 'dut' | 'eng' | 'est' | 'fil' | 'fin' | 'fiu' | 'fre' | 'ger' | 'gre' | 'heb' | 'hun' | 'ice' | 'ita' | 'jpn' | 'kaz' | 'kur' | 'lav' | 'lit' | 'mis' | 'mlt' | 'nor' | 'per' | 'pol' | 'por' | 'prs' | 'pus' | 'rmu' | 'rom' | 'rom-arli' | 'rom-kaal' | 'rom-keld' | 'rom-lova' | 'rum' | 'run' | 'rus' | 'scr' | 'sgn-GBR' | 'sgn-SWE' | 'sju' | 'slo' | 'slv' | 'sma' | 'sme' | 'smj' | 'som' | 'spa' | 'srp' | 'swa' | 'swe' | 'tha' | 'tir' | 'tur' | 'yid'} [language] Filter by spoken language. Available values extends ISO 639-3 with languages not present in the standard
         * @param {'A1' | 'A2' | 'B1' | 'B2' | 'C1'} [languageLevel] Filter by language level
         * @param {'urskola' | 'urplay' | 'uraccess'} [platform] Filter by availability on urskola, urplay, uraccess
         * @param {'program' | 'series' | 'super_series'} [productType] Filter by program, series, super_series
         * @param {string} [query] Search query
         * @param {number} [rows] How many results to return, i.e limit
         * @param {boolean} [singlesAndSeries] Filter by Singles and Series
         * @param {'availability_ending' | 'duration' | 'latest' | 'modified' | 'published' | 'most_shared' | 'start_date' | 'title' | 'most_viewed' | 'score_and_pubdate'} [sort] Sort query by: * &#x60;availability_ending&#x60; - product availability, ending soonest (descending) * &#x60;duration&#x60; - duration descending * &#x60;latest&#x60; - latest broadcast date * &#x60;modified&#x60; - modified descending * &#x60;published&#x60; - digital publishing date (descending) * &#x60;most_shared&#x60; - most shared descending, depends on platform  * &#x60;start_date&#x60; - product availability, starting soonest (descending) * &#x60;title&#x60; - title ascending * &#x60;most_viewed&#x60; - most viewed descending, depends on platform * &#x60;score_and_pubdate&#x60; - score and published date 
         * @param {number} [start] From where to start returning results, i.e offset
         * @param {string} [subjectTree] Case insensitive subject tree name, i.e. \&quot;pedagogiska fr√•gor/it, medier och digital kompetens\&quot;
         * @param {Array<'preschool' | 'primary0-3' | 'primary4-6' | 'primary7-9' | 'secondary' | 'university' | 'folkhighschool' | 'komvuxgrundvux' | 'teachereducation' | 'schoolvux' | 'specialschool' | 'popularadulteducation' | 'specialschoolprimary' | 'specialschoolsecondary' | 'specialschooladults' | 'adults' | 'children'>} [typicalAgeRange] &lt;b&gt;NOTE:&lt;/b&gt;&lt;br/&gt; \&#39;children\&#39; &#x3D; (preschool OR primary0-3 OR primary4-6) &lt;br/&gt; \&#39;adults\&#39; &#x3D; (primary7-9 OR secondary OR university OR folkhighschool OR komvuxgrundvux OR teachereducation OR schoolvux OR specialschool OR popularadulteducation OR specialschoolprimary OR specialschoolsecondary OR specialschooladults)
         * @param {boolean} [withAudioDescription] Filter by Audio Description (Syntolkat)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productSearch(availabilityEnding?: boolean, category?: string, emotional?: string, facet?: boolean, format?: 'audio' | 'video', hasTeacherResource?: boolean, id?: Array<string>, language?: 'aii' | 'alb' | 'amh' | 'ara' | 'bos' | 'bul' | 'cat' | 'che' | 'chi' | 'ckb' | 'cld' | 'cze' | 'dan' | 'dut' | 'eng' | 'est' | 'fil' | 'fin' | 'fiu' | 'fre' | 'ger' | 'gre' | 'heb' | 'hun' | 'ice' | 'ita' | 'jpn' | 'kaz' | 'kur' | 'lav' | 'lit' | 'mis' | 'mlt' | 'nor' | 'per' | 'pol' | 'por' | 'prs' | 'pus' | 'rmu' | 'rom' | 'rom-arli' | 'rom-kaal' | 'rom-keld' | 'rom-lova' | 'rum' | 'run' | 'rus' | 'scr' | 'sgn-GBR' | 'sgn-SWE' | 'sju' | 'slo' | 'slv' | 'sma' | 'sme' | 'smj' | 'som' | 'spa' | 'srp' | 'swa' | 'swe' | 'tha' | 'tir' | 'tur' | 'yid', languageLevel?: 'A1' | 'A2' | 'B1' | 'B2' | 'C1', platform?: 'urskola' | 'urplay' | 'uraccess', productType?: 'program' | 'series' | 'super_series', query?: string, rows?: number, singlesAndSeries?: boolean, sort?: 'availability_ending' | 'duration' | 'latest' | 'modified' | 'published' | 'most_shared' | 'start_date' | 'title' | 'most_viewed' | 'score_and_pubdate', start?: number, subjectTree?: string, typicalAgeRange?: Array<'preschool' | 'primary0-3' | 'primary4-6' | 'primary7-9' | 'secondary' | 'university' | 'folkhighschool' | 'komvuxgrundvux' | 'teachereducation' | 'schoolvux' | 'specialschool' | 'popularadulteducation' | 'specialschoolprimary' | 'specialschoolsecondary' | 'specialschooladults' | 'adults' | 'children'>, withAudioDescription?: boolean, options?: any) {
            return SearchApiFp(configuration).productSearch(availabilityEnding, category, emotional, facet, format, hasTeacherResource, id, language, languageLevel, platform, productType, query, rows, singlesAndSeries, sort, start, subjectTree, typicalAgeRange, withAudioDescription, options)(axios, basePath);
        },
    };
};

/**
 * SearchApi - object-oriented interface
 * @export
 * @class SearchApi
 * @extends {BaseAPI}
 */
export class SearchApi extends BaseAPI {
    /**
     * 
     * @summary Product search
     * @param {boolean} [availabilityEnding] Filter programs by availability, only including the ones whoose availability is going to end in the next five days Aliased to the deprecated &#x60;last_chance&#x60; parameter 
     * @param {string} [category] Filter by category, the available categories can be fetched from the categories endpoint &#x60;/categories&#x60; 
     * @param {string} [emotional] Filter by emotional tag
     * @param {boolean} [facet] Aggregate term facets for the different fields. The sort order is not defined.  * &#x60;product_type&#x60; * &#x60;format&#x60; * &#x60;keywords&#x60; * &#x60;typical_age_range&#x60; * &#x60;languages&#x60; * &#x60;subtitle_languages&#x60; * &#x60;subject_tree&#x60; * &#x60;categories&#x60; * &#x60;has_teacher_resource&#x60; 
     * @param {'audio' | 'video'} [format] Filter by audio or video
     * @param {boolean} [hasTeacherResource] Filter by programs that have attached teacher resources
     * @param {Array<string>} [id] Filter by UR product id
     * @param {'aii' | 'alb' | 'amh' | 'ara' | 'bos' | 'bul' | 'cat' | 'che' | 'chi' | 'ckb' | 'cld' | 'cze' | 'dan' | 'dut' | 'eng' | 'est' | 'fil' | 'fin' | 'fiu' | 'fre' | 'ger' | 'gre' | 'heb' | 'hun' | 'ice' | 'ita' | 'jpn' | 'kaz' | 'kur' | 'lav' | 'lit' | 'mis' | 'mlt' | 'nor' | 'per' | 'pol' | 'por' | 'prs' | 'pus' | 'rmu' | 'rom' | 'rom-arli' | 'rom-kaal' | 'rom-keld' | 'rom-lova' | 'rum' | 'run' | 'rus' | 'scr' | 'sgn-GBR' | 'sgn-SWE' | 'sju' | 'slo' | 'slv' | 'sma' | 'sme' | 'smj' | 'som' | 'spa' | 'srp' | 'swa' | 'swe' | 'tha' | 'tir' | 'tur' | 'yid'} [language] Filter by spoken language. Available values extends ISO 639-3 with languages not present in the standard
     * @param {'A1' | 'A2' | 'B1' | 'B2' | 'C1'} [languageLevel] Filter by language level
     * @param {'urskola' | 'urplay' | 'uraccess'} [platform] Filter by availability on urskola, urplay, uraccess
     * @param {'program' | 'series' | 'super_series'} [productType] Filter by program, series, super_series
     * @param {string} [query] Search query
     * @param {number} [rows] How many results to return, i.e limit
     * @param {boolean} [singlesAndSeries] Filter by Singles and Series
     * @param {'availability_ending' | 'duration' | 'latest' | 'modified' | 'published' | 'most_shared' | 'start_date' | 'title' | 'most_viewed' | 'score_and_pubdate'} [sort] Sort query by: * &#x60;availability_ending&#x60; - product availability, ending soonest (descending) * &#x60;duration&#x60; - duration descending * &#x60;latest&#x60; - latest broadcast date * &#x60;modified&#x60; - modified descending * &#x60;published&#x60; - digital publishing date (descending) * &#x60;most_shared&#x60; - most shared descending, depends on platform  * &#x60;start_date&#x60; - product availability, starting soonest (descending) * &#x60;title&#x60; - title ascending * &#x60;most_viewed&#x60; - most viewed descending, depends on platform * &#x60;score_and_pubdate&#x60; - score and published date 
     * @param {number} [start] From where to start returning results, i.e offset
     * @param {string} [subjectTree] Case insensitive subject tree name, i.e. \&quot;pedagogiska fr√•gor/it, medier och digital kompetens\&quot;
     * @param {Array<'preschool' | 'primary0-3' | 'primary4-6' | 'primary7-9' | 'secondary' | 'university' | 'folkhighschool' | 'komvuxgrundvux' | 'teachereducation' | 'schoolvux' | 'specialschool' | 'popularadulteducation' | 'specialschoolprimary' | 'specialschoolsecondary' | 'specialschooladults' | 'adults' | 'children'>} [typicalAgeRange] &lt;b&gt;NOTE:&lt;/b&gt;&lt;br/&gt; \&#39;children\&#39; &#x3D; (preschool OR primary0-3 OR primary4-6) &lt;br/&gt; \&#39;adults\&#39; &#x3D; (primary7-9 OR secondary OR university OR folkhighschool OR komvuxgrundvux OR teachereducation OR schoolvux OR specialschool OR popularadulteducation OR specialschoolprimary OR specialschoolsecondary OR specialschooladults)
     * @param {boolean} [withAudioDescription] Filter by Audio Description (Syntolkat)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public productSearch(availabilityEnding?: boolean, category?: string, emotional?: string, facet?: boolean, format?: 'audio' | 'video', hasTeacherResource?: boolean, id?: Array<string>, language?: 'aii' | 'alb' | 'amh' | 'ara' | 'bos' | 'bul' | 'cat' | 'che' | 'chi' | 'ckb' | 'cld' | 'cze' | 'dan' | 'dut' | 'eng' | 'est' | 'fil' | 'fin' | 'fiu' | 'fre' | 'ger' | 'gre' | 'heb' | 'hun' | 'ice' | 'ita' | 'jpn' | 'kaz' | 'kur' | 'lav' | 'lit' | 'mis' | 'mlt' | 'nor' | 'per' | 'pol' | 'por' | 'prs' | 'pus' | 'rmu' | 'rom' | 'rom-arli' | 'rom-kaal' | 'rom-keld' | 'rom-lova' | 'rum' | 'run' | 'rus' | 'scr' | 'sgn-GBR' | 'sgn-SWE' | 'sju' | 'slo' | 'slv' | 'sma' | 'sme' | 'smj' | 'som' | 'spa' | 'srp' | 'swa' | 'swe' | 'tha' | 'tir' | 'tur' | 'yid', languageLevel?: 'A1' | 'A2' | 'B1' | 'B2' | 'C1', platform?: 'urskola' | 'urplay' | 'uraccess', productType?: 'program' | 'series' | 'super_series', query?: string, rows?: number, singlesAndSeries?: boolean, sort?: 'availability_ending' | 'duration' | 'latest' | 'modified' | 'published' | 'most_shared' | 'start_date' | 'title' | 'most_viewed' | 'score_and_pubdate', start?: number, subjectTree?: string, typicalAgeRange?: Array<'preschool' | 'primary0-3' | 'primary4-6' | 'primary7-9' | 'secondary' | 'university' | 'folkhighschool' | 'komvuxgrundvux' | 'teachereducation' | 'schoolvux' | 'specialschool' | 'popularadulteducation' | 'specialschoolprimary' | 'specialschoolsecondary' | 'specialschooladults' | 'adults' | 'children'>, withAudioDescription?: boolean, options?: any) {
        return SearchApiFp(this.configuration).productSearch(availabilityEnding, category, emotional, facet, format, hasTeacherResource, id, language, languageLevel, platform, productType, query, rows, singlesAndSeries, sort, start, subjectTree, typicalAgeRange, withAudioDescription, options)(this.axios, this.basePath);
    }

}


/**
 * SeriesApi - axios parameter creator
 * @export
 */
export const SeriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves a series
         * @param {number} id Series ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSeriesById(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getSeriesById.');
            }
            const localVarPath = `/series/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Imports product and all child products
         * @param {number} id import ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importProductById(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling importProductById.');
            }
            const localVarPath = `/import/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SeriesApi - functional programming interface
 * @export
 */
export const SeriesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves a series
         * @param {number} id Series ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSeriesById(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Series> {
            const localVarAxiosArgs = SeriesApiAxiosParamCreator(configuration).getSeriesById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Imports product and all child products
         * @param {number} id import ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importProductById(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2003> {
            const localVarAxiosArgs = SeriesApiAxiosParamCreator(configuration).importProductById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SeriesApi - factory interface
 * @export
 */
export const SeriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Retrieves a series
         * @param {number} id Series ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSeriesById(id: number, options?: any) {
            return SeriesApiFp(configuration).getSeriesById(id, options)(axios, basePath);
        },
        /**
         * 
         * @summary Imports product and all child products
         * @param {number} id import ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importProductById(id: number, options?: any) {
            return SeriesApiFp(configuration).importProductById(id, options)(axios, basePath);
        },
    };
};

/**
 * SeriesApi - object-oriented interface
 * @export
 * @class SeriesApi
 * @extends {BaseAPI}
 */
export class SeriesApi extends BaseAPI {
    /**
     * 
     * @summary Retrieves a series
     * @param {number} id Series ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeriesApi
     */
    public getSeriesById(id: number, options?: any) {
        return SeriesApiFp(this.configuration).getSeriesById(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Imports product and all child products
     * @param {number} id import ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeriesApi
     */
    public importProductById(id: number, options?: any) {
        return SeriesApiFp(this.configuration).importProductById(id, options)(this.axios, this.basePath);
    }

}


/**
 * SubjectTreeApi - axios parameter creator
 * @export
 */
export const SubjectTreeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary All Subject Tree
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubjectTree(options: any = {}): RequestArgs {
            const localVarPath = `/subject_tree`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SubjectTreeApi - functional programming interface
 * @export
 */
export const SubjectTreeApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary All Subject Tree
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubjectTree(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200> {
            const localVarAxiosArgs = SubjectTreeApiAxiosParamCreator(configuration).getSubjectTree(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SubjectTreeApi - factory interface
 * @export
 */
export const SubjectTreeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary All Subject Tree
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubjectTree(options?: any) {
            return SubjectTreeApiFp(configuration).getSubjectTree(options)(axios, basePath);
        },
    };
};

/**
 * SubjectTreeApi - object-oriented interface
 * @export
 * @class SubjectTreeApi
 * @extends {BaseAPI}
 */
export class SubjectTreeApi extends BaseAPI {
    /**
     * 
     * @summary All Subject Tree
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubjectTreeApi
     */
    public getSubjectTree(options?: any) {
        return SubjectTreeApiFp(this.configuration).getSubjectTree(options)(this.axios, this.basePath);
    }

}


/**
 * SuperSeriesApi - axios parameter creator
 * @export
 */
export const SuperSeriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves a super_series
         * @param {number} id SuperSeries ID
         * @param {'programs'} [includes] Includes a program
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSuperSeries(id: number, includes?: 'programs', options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getSuperSeries.');
            }
            const localVarPath = `/super_series/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (includes !== undefined) {
                localVarQueryParameter['includes'] = includes;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Imports product and all child products
         * @param {number} id import ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importProductById(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling importProductById.');
            }
            const localVarPath = `/import/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SuperSeriesApi - functional programming interface
 * @export
 */
export const SuperSeriesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Retrieves a super_series
         * @param {number} id SuperSeries ID
         * @param {'programs'} [includes] Includes a program
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSuperSeries(id: number, includes?: 'programs', options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuperSeries> {
            const localVarAxiosArgs = SuperSeriesApiAxiosParamCreator(configuration).getSuperSeries(id, includes, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Imports product and all child products
         * @param {number} id import ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importProductById(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2003> {
            const localVarAxiosArgs = SuperSeriesApiAxiosParamCreator(configuration).importProductById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SuperSeriesApi - factory interface
 * @export
 */
export const SuperSeriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Retrieves a super_series
         * @param {number} id SuperSeries ID
         * @param {'programs'} [includes] Includes a program
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSuperSeries(id: number, includes?: 'programs', options?: any) {
            return SuperSeriesApiFp(configuration).getSuperSeries(id, includes, options)(axios, basePath);
        },
        /**
         * 
         * @summary Imports product and all child products
         * @param {number} id import ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importProductById(id: number, options?: any) {
            return SuperSeriesApiFp(configuration).importProductById(id, options)(axios, basePath);
        },
    };
};

/**
 * SuperSeriesApi - object-oriented interface
 * @export
 * @class SuperSeriesApi
 * @extends {BaseAPI}
 */
export class SuperSeriesApi extends BaseAPI {
    /**
     * 
     * @summary Retrieves a super_series
     * @param {number} id SuperSeries ID
     * @param {'programs'} [includes] Includes a program
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuperSeriesApi
     */
    public getSuperSeries(id: number, includes?: 'programs', options?: any) {
        return SuperSeriesApiFp(this.configuration).getSuperSeries(id, includes, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Imports product and all child products
     * @param {number} id import ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuperSeriesApi
     */
    public importProductById(id: number, options?: any) {
        return SuperSeriesApiFp(this.configuration).importProductById(id, options)(this.axios, this.basePath);
    }

}


/**
 * TypicalAgeRangesApi - axios parameter creator
 * @export
 */
export const TypicalAgeRangesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary All typical age ranges and their translations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTypicalAgeRanges(options: any = {}): RequestArgs {
            const localVarPath = `/typical_age_ranges`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TypicalAgeRangesApi - functional programming interface
 * @export
 */
export const TypicalAgeRangesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary All typical age ranges and their translations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTypicalAgeRanges(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200> {
            const localVarAxiosArgs = TypicalAgeRangesApiAxiosParamCreator(configuration).getTypicalAgeRanges(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TypicalAgeRangesApi - factory interface
 * @export
 */
export const TypicalAgeRangesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary All typical age ranges and their translations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTypicalAgeRanges(options?: any) {
            return TypicalAgeRangesApiFp(configuration).getTypicalAgeRanges(options)(axios, basePath);
        },
    };
};

/**
 * TypicalAgeRangesApi - object-oriented interface
 * @export
 * @class TypicalAgeRangesApi
 * @extends {BaseAPI}
 */
export class TypicalAgeRangesApi extends BaseAPI {
    /**
     * 
     * @summary All typical age ranges and their translations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TypicalAgeRangesApi
     */
    public getTypicalAgeRanges(options?: any) {
        return TypicalAgeRangesApiFp(this.configuration).getTypicalAgeRanges(options)(this.axios, this.basePath);
    }

}


